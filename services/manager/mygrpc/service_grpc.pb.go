// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mygrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MyGRPCClient is the client API for MyGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MyGRPCClient interface {
	NewMLResult(ctx context.Context, in *ReqMLResult, opts ...grpc.CallOption) (*ResEmpty, error)
	PullMLResult(ctx context.Context, in *ReqPullMLResult, opts ...grpc.CallOption) (MyGRPC_PullMLResultClient, error)
	ValidateOCR(ctx context.Context, in *ReqValidateOCR, opts ...grpc.CallOption) (*ResEmpty, error)
	ListContainerOCRs(ctx context.Context, in *ReqListContainerOCRs, opts ...grpc.CallOption) (*ResListContainerOCRs, error)
	ListCamSettings(ctx context.Context, in *ReqListCamSettings, opts ...grpc.CallOption) (*ResListCamSettings, error)
	ListLanes(ctx context.Context, in *ReqListLanes, opts ...grpc.CallOption) (*ResListLanes, error)
}

type myGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewMyGRPCClient(cc grpc.ClientConnInterface) MyGRPCClient {
	return &myGRPCClient{cc}
}

func (c *myGRPCClient) NewMLResult(ctx context.Context, in *ReqMLResult, opts ...grpc.CallOption) (*ResEmpty, error) {
	out := new(ResEmpty)
	err := c.cc.Invoke(ctx, "/main.MyGRPC/newMLResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myGRPCClient) PullMLResult(ctx context.Context, in *ReqPullMLResult, opts ...grpc.CallOption) (MyGRPC_PullMLResultClient, error) {
	stream, err := c.cc.NewStream(ctx, &MyGRPC_ServiceDesc.Streams[0], "/main.MyGRPC/pullMLResult", opts...)
	if err != nil {
		return nil, err
	}
	x := &myGRPCPullMLResultClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MyGRPC_PullMLResultClient interface {
	Recv() (*ResMLResult, error)
	grpc.ClientStream
}

type myGRPCPullMLResultClient struct {
	grpc.ClientStream
}

func (x *myGRPCPullMLResultClient) Recv() (*ResMLResult, error) {
	m := new(ResMLResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *myGRPCClient) ValidateOCR(ctx context.Context, in *ReqValidateOCR, opts ...grpc.CallOption) (*ResEmpty, error) {
	out := new(ResEmpty)
	err := c.cc.Invoke(ctx, "/main.MyGRPC/validateOCR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myGRPCClient) ListContainerOCRs(ctx context.Context, in *ReqListContainerOCRs, opts ...grpc.CallOption) (*ResListContainerOCRs, error) {
	out := new(ResListContainerOCRs)
	err := c.cc.Invoke(ctx, "/main.MyGRPC/listContainerOCRs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myGRPCClient) ListCamSettings(ctx context.Context, in *ReqListCamSettings, opts ...grpc.CallOption) (*ResListCamSettings, error) {
	out := new(ResListCamSettings)
	err := c.cc.Invoke(ctx, "/main.MyGRPC/listCamSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myGRPCClient) ListLanes(ctx context.Context, in *ReqListLanes, opts ...grpc.CallOption) (*ResListLanes, error) {
	out := new(ResListLanes)
	err := c.cc.Invoke(ctx, "/main.MyGRPC/listLanes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyGRPCServer is the server API for MyGRPC service.
// All implementations must embed UnimplementedMyGRPCServer
// for forward compatibility
type MyGRPCServer interface {
	NewMLResult(context.Context, *ReqMLResult) (*ResEmpty, error)
	PullMLResult(*ReqPullMLResult, MyGRPC_PullMLResultServer) error
	ValidateOCR(context.Context, *ReqValidateOCR) (*ResEmpty, error)
	ListContainerOCRs(context.Context, *ReqListContainerOCRs) (*ResListContainerOCRs, error)
	ListCamSettings(context.Context, *ReqListCamSettings) (*ResListCamSettings, error)
	ListLanes(context.Context, *ReqListLanes) (*ResListLanes, error)
	mustEmbedUnimplementedMyGRPCServer()
}

// UnimplementedMyGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedMyGRPCServer struct {
}

func (UnimplementedMyGRPCServer) NewMLResult(context.Context, *ReqMLResult) (*ResEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewMLResult not implemented")
}
func (UnimplementedMyGRPCServer) PullMLResult(*ReqPullMLResult, MyGRPC_PullMLResultServer) error {
	return status.Errorf(codes.Unimplemented, "method PullMLResult not implemented")
}
func (UnimplementedMyGRPCServer) ValidateOCR(context.Context, *ReqValidateOCR) (*ResEmpty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateOCR not implemented")
}
func (UnimplementedMyGRPCServer) ListContainerOCRs(context.Context, *ReqListContainerOCRs) (*ResListContainerOCRs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContainerOCRs not implemented")
}
func (UnimplementedMyGRPCServer) ListCamSettings(context.Context, *ReqListCamSettings) (*ResListCamSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCamSettings not implemented")
}
func (UnimplementedMyGRPCServer) ListLanes(context.Context, *ReqListLanes) (*ResListLanes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLanes not implemented")
}
func (UnimplementedMyGRPCServer) mustEmbedUnimplementedMyGRPCServer() {}

// UnsafeMyGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MyGRPCServer will
// result in compilation errors.
type UnsafeMyGRPCServer interface {
	mustEmbedUnimplementedMyGRPCServer()
}

func RegisterMyGRPCServer(s grpc.ServiceRegistrar, srv MyGRPCServer) {
	s.RegisterService(&MyGRPC_ServiceDesc, srv)
}

func _MyGRPC_NewMLResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqMLResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyGRPCServer).NewMLResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.MyGRPC/newMLResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyGRPCServer).NewMLResult(ctx, req.(*ReqMLResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyGRPC_PullMLResult_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReqPullMLResult)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MyGRPCServer).PullMLResult(m, &myGRPCPullMLResultServer{stream})
}

type MyGRPC_PullMLResultServer interface {
	Send(*ResMLResult) error
	grpc.ServerStream
}

type myGRPCPullMLResultServer struct {
	grpc.ServerStream
}

func (x *myGRPCPullMLResultServer) Send(m *ResMLResult) error {
	return x.ServerStream.SendMsg(m)
}

func _MyGRPC_ValidateOCR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqValidateOCR)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyGRPCServer).ValidateOCR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.MyGRPC/validateOCR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyGRPCServer).ValidateOCR(ctx, req.(*ReqValidateOCR))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyGRPC_ListContainerOCRs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqListContainerOCRs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyGRPCServer).ListContainerOCRs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.MyGRPC/listContainerOCRs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyGRPCServer).ListContainerOCRs(ctx, req.(*ReqListContainerOCRs))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyGRPC_ListCamSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqListCamSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyGRPCServer).ListCamSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.MyGRPC/listCamSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyGRPCServer).ListCamSettings(ctx, req.(*ReqListCamSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyGRPC_ListLanes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqListLanes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyGRPCServer).ListLanes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.MyGRPC/listLanes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyGRPCServer).ListLanes(ctx, req.(*ReqListLanes))
	}
	return interceptor(ctx, in, info, handler)
}

// MyGRPC_ServiceDesc is the grpc.ServiceDesc for MyGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MyGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.MyGRPC",
	HandlerType: (*MyGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "newMLResult",
			Handler:    _MyGRPC_NewMLResult_Handler,
		},
		{
			MethodName: "validateOCR",
			Handler:    _MyGRPC_ValidateOCR_Handler,
		},
		{
			MethodName: "listContainerOCRs",
			Handler:    _MyGRPC_ListContainerOCRs_Handler,
		},
		{
			MethodName: "listCamSettings",
			Handler:    _MyGRPC_ListCamSettings_Handler,
		},
		{
			MethodName: "listLanes",
			Handler:    _MyGRPC_ListLanes_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "pullMLResult",
			Handler:       _MyGRPC_PullMLResult_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/service.proto",
}
