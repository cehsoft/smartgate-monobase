// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/init-tech-solution/service-spitc-stream/services/manager/ent/camsetting"
	"github.com/init-tech-solution/service-spitc-stream/services/manager/ent/lane"
	"github.com/init-tech-solution/service-spitc-stream/services/manager/ent/predicate"
)

// CamSettingUpdate is the builder for updating CamSetting entities.
type CamSettingUpdate struct {
	config
	hooks    []Hook
	mutation *CamSettingMutation
}

// Where adds a new predicate for the CamSettingUpdate builder.
func (csu *CamSettingUpdate) Where(ps ...predicate.CamSetting) *CamSettingUpdate {
	csu.mutation.predicates = append(csu.mutation.predicates, ps...)
	return csu
}

// SetName sets the "name" field.
func (csu *CamSettingUpdate) SetName(s string) *CamSettingUpdate {
	csu.mutation.SetName(s)
	return csu
}

// SetLaneID sets the "lane_id" field.
func (csu *CamSettingUpdate) SetLaneID(i int) *CamSettingUpdate {
	csu.mutation.ResetLaneID()
	csu.mutation.SetLaneID(i)
	return csu
}

// SetNillableLaneID sets the "lane_id" field if the given value is not nil.
func (csu *CamSettingUpdate) SetNillableLaneID(i *int) *CamSettingUpdate {
	if i != nil {
		csu.SetLaneID(*i)
	}
	return csu
}

// ClearLaneID clears the value of the "lane_id" field.
func (csu *CamSettingUpdate) ClearLaneID() *CamSettingUpdate {
	csu.mutation.ClearLaneID()
	return csu
}

// SetRtspURL sets the "rtsp_url" field.
func (csu *CamSettingUpdate) SetRtspURL(s string) *CamSettingUpdate {
	csu.mutation.SetRtspURL(s)
	return csu
}

// SetWebrtcURL sets the "webrtc_url" field.
func (csu *CamSettingUpdate) SetWebrtcURL(s string) *CamSettingUpdate {
	csu.mutation.SetWebrtcURL(s)
	return csu
}

// SetCreatedAt sets the "created_at" field.
func (csu *CamSettingUpdate) SetCreatedAt(t time.Time) *CamSettingUpdate {
	csu.mutation.SetCreatedAt(t)
	return csu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (csu *CamSettingUpdate) SetNillableCreatedAt(t *time.Time) *CamSettingUpdate {
	if t != nil {
		csu.SetCreatedAt(*t)
	}
	return csu
}

// SetLane sets the "lane" edge to the Lane entity.
func (csu *CamSettingUpdate) SetLane(l *Lane) *CamSettingUpdate {
	return csu.SetLaneID(l.ID)
}

// Mutation returns the CamSettingMutation object of the builder.
func (csu *CamSettingUpdate) Mutation() *CamSettingMutation {
	return csu.mutation
}

// ClearLane clears the "lane" edge to the Lane entity.
func (csu *CamSettingUpdate) ClearLane() *CamSettingUpdate {
	csu.mutation.ClearLane()
	return csu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (csu *CamSettingUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(csu.hooks) == 0 {
		affected, err = csu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CamSettingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			csu.mutation = mutation
			affected, err = csu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(csu.hooks) - 1; i >= 0; i-- {
			mut = csu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, csu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (csu *CamSettingUpdate) SaveX(ctx context.Context) int {
	affected, err := csu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (csu *CamSettingUpdate) Exec(ctx context.Context) error {
	_, err := csu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csu *CamSettingUpdate) ExecX(ctx context.Context) {
	if err := csu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (csu *CamSettingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   camsetting.Table,
			Columns: camsetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: camsetting.FieldID,
			},
		},
	}
	if ps := csu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: camsetting.FieldName,
		})
	}
	if value, ok := csu.mutation.RtspURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: camsetting.FieldRtspURL,
		})
	}
	if value, ok := csu.mutation.WebrtcURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: camsetting.FieldWebrtcURL,
		})
	}
	if value, ok := csu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: camsetting.FieldCreatedAt,
		})
	}
	if csu.mutation.LaneCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   camsetting.LaneTable,
			Columns: []string{camsetting.LaneColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lane.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.LaneIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   camsetting.LaneTable,
			Columns: []string{camsetting.LaneColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lane.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, csu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{camsetting.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CamSettingUpdateOne is the builder for updating a single CamSetting entity.
type CamSettingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CamSettingMutation
}

// SetName sets the "name" field.
func (csuo *CamSettingUpdateOne) SetName(s string) *CamSettingUpdateOne {
	csuo.mutation.SetName(s)
	return csuo
}

// SetLaneID sets the "lane_id" field.
func (csuo *CamSettingUpdateOne) SetLaneID(i int) *CamSettingUpdateOne {
	csuo.mutation.ResetLaneID()
	csuo.mutation.SetLaneID(i)
	return csuo
}

// SetNillableLaneID sets the "lane_id" field if the given value is not nil.
func (csuo *CamSettingUpdateOne) SetNillableLaneID(i *int) *CamSettingUpdateOne {
	if i != nil {
		csuo.SetLaneID(*i)
	}
	return csuo
}

// ClearLaneID clears the value of the "lane_id" field.
func (csuo *CamSettingUpdateOne) ClearLaneID() *CamSettingUpdateOne {
	csuo.mutation.ClearLaneID()
	return csuo
}

// SetRtspURL sets the "rtsp_url" field.
func (csuo *CamSettingUpdateOne) SetRtspURL(s string) *CamSettingUpdateOne {
	csuo.mutation.SetRtspURL(s)
	return csuo
}

// SetWebrtcURL sets the "webrtc_url" field.
func (csuo *CamSettingUpdateOne) SetWebrtcURL(s string) *CamSettingUpdateOne {
	csuo.mutation.SetWebrtcURL(s)
	return csuo
}

// SetCreatedAt sets the "created_at" field.
func (csuo *CamSettingUpdateOne) SetCreatedAt(t time.Time) *CamSettingUpdateOne {
	csuo.mutation.SetCreatedAt(t)
	return csuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (csuo *CamSettingUpdateOne) SetNillableCreatedAt(t *time.Time) *CamSettingUpdateOne {
	if t != nil {
		csuo.SetCreatedAt(*t)
	}
	return csuo
}

// SetLane sets the "lane" edge to the Lane entity.
func (csuo *CamSettingUpdateOne) SetLane(l *Lane) *CamSettingUpdateOne {
	return csuo.SetLaneID(l.ID)
}

// Mutation returns the CamSettingMutation object of the builder.
func (csuo *CamSettingUpdateOne) Mutation() *CamSettingMutation {
	return csuo.mutation
}

// ClearLane clears the "lane" edge to the Lane entity.
func (csuo *CamSettingUpdateOne) ClearLane() *CamSettingUpdateOne {
	csuo.mutation.ClearLane()
	return csuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (csuo *CamSettingUpdateOne) Select(field string, fields ...string) *CamSettingUpdateOne {
	csuo.fields = append([]string{field}, fields...)
	return csuo
}

// Save executes the query and returns the updated CamSetting entity.
func (csuo *CamSettingUpdateOne) Save(ctx context.Context) (*CamSetting, error) {
	var (
		err  error
		node *CamSetting
	)
	if len(csuo.hooks) == 0 {
		node, err = csuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CamSettingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			csuo.mutation = mutation
			node, err = csuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(csuo.hooks) - 1; i >= 0; i-- {
			mut = csuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, csuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (csuo *CamSettingUpdateOne) SaveX(ctx context.Context) *CamSetting {
	node, err := csuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (csuo *CamSettingUpdateOne) Exec(ctx context.Context) error {
	_, err := csuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csuo *CamSettingUpdateOne) ExecX(ctx context.Context) {
	if err := csuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (csuo *CamSettingUpdateOne) sqlSave(ctx context.Context) (_node *CamSetting, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   camsetting.Table,
			Columns: camsetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: camsetting.FieldID,
			},
		},
	}
	id, ok := csuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing CamSetting.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := csuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, camsetting.FieldID)
		for _, f := range fields {
			if !camsetting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != camsetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := csuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := csuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: camsetting.FieldName,
		})
	}
	if value, ok := csuo.mutation.RtspURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: camsetting.FieldRtspURL,
		})
	}
	if value, ok := csuo.mutation.WebrtcURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: camsetting.FieldWebrtcURL,
		})
	}
	if value, ok := csuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: camsetting.FieldCreatedAt,
		})
	}
	if csuo.mutation.LaneCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   camsetting.LaneTable,
			Columns: []string{camsetting.LaneColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lane.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.LaneIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   camsetting.LaneTable,
			Columns: []string{camsetting.LaneColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: lane.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CamSetting{config: csuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, csuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{camsetting.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
