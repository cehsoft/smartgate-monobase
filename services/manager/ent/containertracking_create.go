// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/init-tech-solution/service-spitc-stream/services/manager/ent/containertracking"
	"github.com/init-tech-solution/service-spitc-stream/services/manager/ent/containertrackingsuggestion"
)

// ContainerTrackingCreate is the builder for creating a ContainerTracking entity.
type ContainerTrackingCreate struct {
	config
	mutation *ContainerTrackingMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetContainerID sets the "container_id" field.
func (ctc *ContainerTrackingCreate) SetContainerID(s string) *ContainerTrackingCreate {
	ctc.mutation.SetContainerID(s)
	return ctc
}

// SetNillableContainerID sets the "container_id" field if the given value is not nil.
func (ctc *ContainerTrackingCreate) SetNillableContainerID(s *string) *ContainerTrackingCreate {
	if s != nil {
		ctc.SetContainerID(*s)
	}
	return ctc
}

// SetSessionID sets the "session_id" field.
func (ctc *ContainerTrackingCreate) SetSessionID(s string) *ContainerTrackingCreate {
	ctc.mutation.SetSessionID(s)
	return ctc
}

// SetNillableSessionID sets the "session_id" field if the given value is not nil.
func (ctc *ContainerTrackingCreate) SetNillableSessionID(s *string) *ContainerTrackingCreate {
	if s != nil {
		ctc.SetSessionID(*s)
	}
	return ctc
}

// SetCreatedAt sets the "created_at" field.
func (ctc *ContainerTrackingCreate) SetCreatedAt(t time.Time) *ContainerTrackingCreate {
	ctc.mutation.SetCreatedAt(t)
	return ctc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ctc *ContainerTrackingCreate) SetNillableCreatedAt(t *time.Time) *ContainerTrackingCreate {
	if t != nil {
		ctc.SetCreatedAt(*t)
	}
	return ctc
}

// AddSuggestionIDs adds the "suggestions" edge to the ContainerTrackingSuggestion entity by IDs.
func (ctc *ContainerTrackingCreate) AddSuggestionIDs(ids ...int) *ContainerTrackingCreate {
	ctc.mutation.AddSuggestionIDs(ids...)
	return ctc
}

// AddSuggestions adds the "suggestions" edges to the ContainerTrackingSuggestion entity.
func (ctc *ContainerTrackingCreate) AddSuggestions(c ...*ContainerTrackingSuggestion) *ContainerTrackingCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ctc.AddSuggestionIDs(ids...)
}

// Mutation returns the ContainerTrackingMutation object of the builder.
func (ctc *ContainerTrackingCreate) Mutation() *ContainerTrackingMutation {
	return ctc.mutation
}

// Save creates the ContainerTracking in the database.
func (ctc *ContainerTrackingCreate) Save(ctx context.Context) (*ContainerTracking, error) {
	var (
		err  error
		node *ContainerTracking
	)
	ctc.defaults()
	if len(ctc.hooks) == 0 {
		if err = ctc.check(); err != nil {
			return nil, err
		}
		node, err = ctc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ContainerTrackingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ctc.check(); err != nil {
				return nil, err
			}
			ctc.mutation = mutation
			if node, err = ctc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ctc.hooks) - 1; i >= 0; i-- {
			if ctc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ctc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ctc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ctc *ContainerTrackingCreate) SaveX(ctx context.Context) *ContainerTracking {
	v, err := ctc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ctc *ContainerTrackingCreate) Exec(ctx context.Context) error {
	_, err := ctc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctc *ContainerTrackingCreate) ExecX(ctx context.Context) {
	if err := ctc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ctc *ContainerTrackingCreate) defaults() {
	if _, ok := ctc.mutation.CreatedAt(); !ok {
		v := containertracking.DefaultCreatedAt()
		ctc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ctc *ContainerTrackingCreate) check() error {
	if _, ok := ctc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	return nil
}

func (ctc *ContainerTrackingCreate) sqlSave(ctx context.Context) (*ContainerTracking, error) {
	_node, _spec := ctc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ctc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ctc *ContainerTrackingCreate) createSpec() (*ContainerTracking, *sqlgraph.CreateSpec) {
	var (
		_node = &ContainerTracking{config: ctc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: containertracking.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: containertracking.FieldID,
			},
		}
	)
	_spec.OnConflict = ctc.conflict
	if value, ok := ctc.mutation.ContainerID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: containertracking.FieldContainerID,
		})
		_node.ContainerID = value
	}
	if value, ok := ctc.mutation.SessionID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: containertracking.FieldSessionID,
		})
		_node.SessionID = value
	}
	if value, ok := ctc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: containertracking.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if nodes := ctc.mutation.SuggestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   containertracking.SuggestionsTable,
			Columns: []string{containertracking.SuggestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: containertrackingsuggestion.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ContainerTracking.Create().
//		SetContainerID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ContainerTrackingUpsert) {
//			SetContainerID(v+v).
//		}).
//		Exec(ctx)
//
func (ctc *ContainerTrackingCreate) OnConflict(opts ...sql.ConflictOption) *ContainerTrackingUpsertOne {
	ctc.conflict = opts
	return &ContainerTrackingUpsertOne{
		create: ctc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ContainerTracking.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ctc *ContainerTrackingCreate) OnConflictColumns(columns ...string) *ContainerTrackingUpsertOne {
	ctc.conflict = append(ctc.conflict, sql.ConflictColumns(columns...))
	return &ContainerTrackingUpsertOne{
		create: ctc,
	}
}

type (
	// ContainerTrackingUpsertOne is the builder for "upsert"-ing
	//  one ContainerTracking node.
	ContainerTrackingUpsertOne struct {
		create *ContainerTrackingCreate
	}

	// ContainerTrackingUpsert is the "OnConflict" setter.
	ContainerTrackingUpsert struct {
		*sql.UpdateSet
	}
)

// SetContainerID sets the "container_id" field.
func (u *ContainerTrackingUpsert) SetContainerID(v string) *ContainerTrackingUpsert {
	u.Set(containertracking.FieldContainerID, v)
	return u
}

// UpdateContainerID sets the "container_id" field to the value that was provided on create.
func (u *ContainerTrackingUpsert) UpdateContainerID() *ContainerTrackingUpsert {
	u.SetExcluded(containertracking.FieldContainerID)
	return u
}

// ClearContainerID clears the value of the "container_id" field.
func (u *ContainerTrackingUpsert) ClearContainerID() *ContainerTrackingUpsert {
	u.SetNull(containertracking.FieldContainerID)
	return u
}

// SetSessionID sets the "session_id" field.
func (u *ContainerTrackingUpsert) SetSessionID(v string) *ContainerTrackingUpsert {
	u.Set(containertracking.FieldSessionID, v)
	return u
}

// UpdateSessionID sets the "session_id" field to the value that was provided on create.
func (u *ContainerTrackingUpsert) UpdateSessionID() *ContainerTrackingUpsert {
	u.SetExcluded(containertracking.FieldSessionID)
	return u
}

// ClearSessionID clears the value of the "session_id" field.
func (u *ContainerTrackingUpsert) ClearSessionID() *ContainerTrackingUpsert {
	u.SetNull(containertracking.FieldSessionID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *ContainerTrackingUpsert) SetCreatedAt(v time.Time) *ContainerTrackingUpsert {
	u.Set(containertracking.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ContainerTrackingUpsert) UpdateCreatedAt() *ContainerTrackingUpsert {
	u.SetExcluded(containertracking.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.ContainerTracking.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *ContainerTrackingUpsertOne) UpdateNewValues() *ContainerTrackingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.ContainerTracking.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *ContainerTrackingUpsertOne) Ignore() *ContainerTrackingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ContainerTrackingUpsertOne) DoNothing() *ContainerTrackingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ContainerTrackingCreate.OnConflict
// documentation for more info.
func (u *ContainerTrackingUpsertOne) Update(set func(*ContainerTrackingUpsert)) *ContainerTrackingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ContainerTrackingUpsert{UpdateSet: update})
	}))
	return u
}

// SetContainerID sets the "container_id" field.
func (u *ContainerTrackingUpsertOne) SetContainerID(v string) *ContainerTrackingUpsertOne {
	return u.Update(func(s *ContainerTrackingUpsert) {
		s.SetContainerID(v)
	})
}

// UpdateContainerID sets the "container_id" field to the value that was provided on create.
func (u *ContainerTrackingUpsertOne) UpdateContainerID() *ContainerTrackingUpsertOne {
	return u.Update(func(s *ContainerTrackingUpsert) {
		s.UpdateContainerID()
	})
}

// ClearContainerID clears the value of the "container_id" field.
func (u *ContainerTrackingUpsertOne) ClearContainerID() *ContainerTrackingUpsertOne {
	return u.Update(func(s *ContainerTrackingUpsert) {
		s.ClearContainerID()
	})
}

// SetSessionID sets the "session_id" field.
func (u *ContainerTrackingUpsertOne) SetSessionID(v string) *ContainerTrackingUpsertOne {
	return u.Update(func(s *ContainerTrackingUpsert) {
		s.SetSessionID(v)
	})
}

// UpdateSessionID sets the "session_id" field to the value that was provided on create.
func (u *ContainerTrackingUpsertOne) UpdateSessionID() *ContainerTrackingUpsertOne {
	return u.Update(func(s *ContainerTrackingUpsert) {
		s.UpdateSessionID()
	})
}

// ClearSessionID clears the value of the "session_id" field.
func (u *ContainerTrackingUpsertOne) ClearSessionID() *ContainerTrackingUpsertOne {
	return u.Update(func(s *ContainerTrackingUpsert) {
		s.ClearSessionID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ContainerTrackingUpsertOne) SetCreatedAt(v time.Time) *ContainerTrackingUpsertOne {
	return u.Update(func(s *ContainerTrackingUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ContainerTrackingUpsertOne) UpdateCreatedAt() *ContainerTrackingUpsertOne {
	return u.Update(func(s *ContainerTrackingUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *ContainerTrackingUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ContainerTrackingCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ContainerTrackingUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ContainerTrackingUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ContainerTrackingUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ContainerTrackingCreateBulk is the builder for creating many ContainerTracking entities in bulk.
type ContainerTrackingCreateBulk struct {
	config
	builders []*ContainerTrackingCreate
	conflict []sql.ConflictOption
}

// Save creates the ContainerTracking entities in the database.
func (ctcb *ContainerTrackingCreateBulk) Save(ctx context.Context) ([]*ContainerTracking, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ctcb.builders))
	nodes := make([]*ContainerTracking, len(ctcb.builders))
	mutators := make([]Mutator, len(ctcb.builders))
	for i := range ctcb.builders {
		func(i int, root context.Context) {
			builder := ctcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ContainerTrackingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ctcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ctcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ctcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ctcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ctcb *ContainerTrackingCreateBulk) SaveX(ctx context.Context) []*ContainerTracking {
	v, err := ctcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ctcb *ContainerTrackingCreateBulk) Exec(ctx context.Context) error {
	_, err := ctcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctcb *ContainerTrackingCreateBulk) ExecX(ctx context.Context) {
	if err := ctcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ContainerTracking.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ContainerTrackingUpsert) {
//			SetContainerID(v+v).
//		}).
//		Exec(ctx)
//
func (ctcb *ContainerTrackingCreateBulk) OnConflict(opts ...sql.ConflictOption) *ContainerTrackingUpsertBulk {
	ctcb.conflict = opts
	return &ContainerTrackingUpsertBulk{
		create: ctcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ContainerTracking.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (ctcb *ContainerTrackingCreateBulk) OnConflictColumns(columns ...string) *ContainerTrackingUpsertBulk {
	ctcb.conflict = append(ctcb.conflict, sql.ConflictColumns(columns...))
	return &ContainerTrackingUpsertBulk{
		create: ctcb,
	}
}

// ContainerTrackingUpsertBulk is the builder for "upsert"-ing
// a bulk of ContainerTracking nodes.
type ContainerTrackingUpsertBulk struct {
	create *ContainerTrackingCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ContainerTracking.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
//
func (u *ContainerTrackingUpsertBulk) UpdateNewValues() *ContainerTrackingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ContainerTracking.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *ContainerTrackingUpsertBulk) Ignore() *ContainerTrackingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ContainerTrackingUpsertBulk) DoNothing() *ContainerTrackingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ContainerTrackingCreateBulk.OnConflict
// documentation for more info.
func (u *ContainerTrackingUpsertBulk) Update(set func(*ContainerTrackingUpsert)) *ContainerTrackingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ContainerTrackingUpsert{UpdateSet: update})
	}))
	return u
}

// SetContainerID sets the "container_id" field.
func (u *ContainerTrackingUpsertBulk) SetContainerID(v string) *ContainerTrackingUpsertBulk {
	return u.Update(func(s *ContainerTrackingUpsert) {
		s.SetContainerID(v)
	})
}

// UpdateContainerID sets the "container_id" field to the value that was provided on create.
func (u *ContainerTrackingUpsertBulk) UpdateContainerID() *ContainerTrackingUpsertBulk {
	return u.Update(func(s *ContainerTrackingUpsert) {
		s.UpdateContainerID()
	})
}

// ClearContainerID clears the value of the "container_id" field.
func (u *ContainerTrackingUpsertBulk) ClearContainerID() *ContainerTrackingUpsertBulk {
	return u.Update(func(s *ContainerTrackingUpsert) {
		s.ClearContainerID()
	})
}

// SetSessionID sets the "session_id" field.
func (u *ContainerTrackingUpsertBulk) SetSessionID(v string) *ContainerTrackingUpsertBulk {
	return u.Update(func(s *ContainerTrackingUpsert) {
		s.SetSessionID(v)
	})
}

// UpdateSessionID sets the "session_id" field to the value that was provided on create.
func (u *ContainerTrackingUpsertBulk) UpdateSessionID() *ContainerTrackingUpsertBulk {
	return u.Update(func(s *ContainerTrackingUpsert) {
		s.UpdateSessionID()
	})
}

// ClearSessionID clears the value of the "session_id" field.
func (u *ContainerTrackingUpsertBulk) ClearSessionID() *ContainerTrackingUpsertBulk {
	return u.Update(func(s *ContainerTrackingUpsert) {
		s.ClearSessionID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *ContainerTrackingUpsertBulk) SetCreatedAt(v time.Time) *ContainerTrackingUpsertBulk {
	return u.Update(func(s *ContainerTrackingUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *ContainerTrackingUpsertBulk) UpdateCreatedAt() *ContainerTrackingUpsertBulk {
	return u.Update(func(s *ContainerTrackingUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *ContainerTrackingUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ContainerTrackingCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ContainerTrackingCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ContainerTrackingUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
