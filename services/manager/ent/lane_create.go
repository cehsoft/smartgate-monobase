// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/init-tech-solution/service-spitc-stream/services/manager/ent/camsetting"
	"github.com/init-tech-solution/service-spitc-stream/services/manager/ent/gate"
	"github.com/init-tech-solution/service-spitc-stream/services/manager/ent/lane"
)

// LaneCreate is the builder for creating a Lane entity.
type LaneCreate struct {
	config
	mutation *LaneMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (lc *LaneCreate) SetName(s string) *LaneCreate {
	lc.mutation.SetName(s)
	return lc
}

// SetGateID sets the "gate_id" field.
func (lc *LaneCreate) SetGateID(i int) *LaneCreate {
	lc.mutation.SetGateID(i)
	return lc
}

// SetNillableGateID sets the "gate_id" field if the given value is not nil.
func (lc *LaneCreate) SetNillableGateID(i *int) *LaneCreate {
	if i != nil {
		lc.SetGateID(*i)
	}
	return lc
}

// SetCreatedAt sets the "created_at" field.
func (lc *LaneCreate) SetCreatedAt(t time.Time) *LaneCreate {
	lc.mutation.SetCreatedAt(t)
	return lc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lc *LaneCreate) SetNillableCreatedAt(t *time.Time) *LaneCreate {
	if t != nil {
		lc.SetCreatedAt(*t)
	}
	return lc
}

// AddCamIDs adds the "cams" edge to the CamSetting entity by IDs.
func (lc *LaneCreate) AddCamIDs(ids ...int) *LaneCreate {
	lc.mutation.AddCamIDs(ids...)
	return lc
}

// AddCams adds the "cams" edges to the CamSetting entity.
func (lc *LaneCreate) AddCams(c ...*CamSetting) *LaneCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return lc.AddCamIDs(ids...)
}

// SetGate sets the "gate" edge to the Gate entity.
func (lc *LaneCreate) SetGate(g *Gate) *LaneCreate {
	return lc.SetGateID(g.ID)
}

// Mutation returns the LaneMutation object of the builder.
func (lc *LaneCreate) Mutation() *LaneMutation {
	return lc.mutation
}

// Save creates the Lane in the database.
func (lc *LaneCreate) Save(ctx context.Context) (*Lane, error) {
	var (
		err  error
		node *Lane
	)
	lc.defaults()
	if len(lc.hooks) == 0 {
		if err = lc.check(); err != nil {
			return nil, err
		}
		node, err = lc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LaneMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lc.check(); err != nil {
				return nil, err
			}
			lc.mutation = mutation
			node, err = lc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(lc.hooks) - 1; i >= 0; i-- {
			mut = lc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LaneCreate) SaveX(ctx context.Context) *Lane {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (lc *LaneCreate) defaults() {
	if _, ok := lc.mutation.CreatedAt(); !ok {
		v := lane.DefaultCreatedAt()
		lc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *LaneCreate) check() error {
	if _, ok := lc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := lc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	return nil
}

func (lc *LaneCreate) sqlSave(ctx context.Context) (*Lane, error) {
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (lc *LaneCreate) createSpec() (*Lane, *sqlgraph.CreateSpec) {
	var (
		_node = &Lane{config: lc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: lane.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: lane.FieldID,
			},
		}
	)
	if value, ok := lc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: lane.FieldName,
		})
		_node.Name = value
	}
	if value, ok := lc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: lane.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if nodes := lc.mutation.CamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lane.CamsTable,
			Columns: []string{lane.CamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: camsetting.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := lc.mutation.GateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lane.GateTable,
			Columns: []string{lane.GateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.GateID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LaneCreateBulk is the builder for creating many Lane entities in bulk.
type LaneCreateBulk struct {
	config
	builders []*LaneCreate
}

// Save creates the Lane entities in the database.
func (lcb *LaneCreateBulk) Save(ctx context.Context) ([]*Lane, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Lane, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LaneMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LaneCreateBulk) SaveX(ctx context.Context) []*Lane {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
