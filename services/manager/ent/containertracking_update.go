// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/init-tech-solution/service-spitc-stream/services/manager/ent/containertracking"
	"github.com/init-tech-solution/service-spitc-stream/services/manager/ent/predicate"
)

// ContainerTrackingUpdate is the builder for updating ContainerTracking entities.
type ContainerTrackingUpdate struct {
	config
	hooks    []Hook
	mutation *ContainerTrackingMutation
}

// Where adds a new predicate for the ContainerTrackingUpdate builder.
func (ctu *ContainerTrackingUpdate) Where(ps ...predicate.ContainerTracking) *ContainerTrackingUpdate {
	ctu.mutation.predicates = append(ctu.mutation.predicates, ps...)
	return ctu
}

// SetContainerID sets the "container_id" field.
func (ctu *ContainerTrackingUpdate) SetContainerID(s string) *ContainerTrackingUpdate {
	ctu.mutation.SetContainerID(s)
	return ctu
}

// SetImageURL sets the "image_url" field.
func (ctu *ContainerTrackingUpdate) SetImageURL(s string) *ContainerTrackingUpdate {
	ctu.mutation.SetImageURL(s)
	return ctu
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (ctu *ContainerTrackingUpdate) SetNillableImageURL(s *string) *ContainerTrackingUpdate {
	if s != nil {
		ctu.SetImageURL(*s)
	}
	return ctu
}

// ClearImageURL clears the value of the "image_url" field.
func (ctu *ContainerTrackingUpdate) ClearImageURL() *ContainerTrackingUpdate {
	ctu.mutation.ClearImageURL()
	return ctu
}

// SetManual sets the "manual" field.
func (ctu *ContainerTrackingUpdate) SetManual(b bool) *ContainerTrackingUpdate {
	ctu.mutation.SetManual(b)
	return ctu
}

// SetNillableManual sets the "manual" field if the given value is not nil.
func (ctu *ContainerTrackingUpdate) SetNillableManual(b *bool) *ContainerTrackingUpdate {
	if b != nil {
		ctu.SetManual(*b)
	}
	return ctu
}

// SetCreatedAt sets the "created_at" field.
func (ctu *ContainerTrackingUpdate) SetCreatedAt(t time.Time) *ContainerTrackingUpdate {
	ctu.mutation.SetCreatedAt(t)
	return ctu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ctu *ContainerTrackingUpdate) SetNillableCreatedAt(t *time.Time) *ContainerTrackingUpdate {
	if t != nil {
		ctu.SetCreatedAt(*t)
	}
	return ctu
}

// Mutation returns the ContainerTrackingMutation object of the builder.
func (ctu *ContainerTrackingUpdate) Mutation() *ContainerTrackingMutation {
	return ctu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ctu *ContainerTrackingUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ctu.hooks) == 0 {
		affected, err = ctu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ContainerTrackingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ctu.mutation = mutation
			affected, err = ctu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ctu.hooks) - 1; i >= 0; i-- {
			mut = ctu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ctu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ctu *ContainerTrackingUpdate) SaveX(ctx context.Context) int {
	affected, err := ctu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ctu *ContainerTrackingUpdate) Exec(ctx context.Context) error {
	_, err := ctu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctu *ContainerTrackingUpdate) ExecX(ctx context.Context) {
	if err := ctu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ctu *ContainerTrackingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   containertracking.Table,
			Columns: containertracking.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: containertracking.FieldID,
			},
		},
	}
	if ps := ctu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctu.mutation.ContainerID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: containertracking.FieldContainerID,
		})
	}
	if value, ok := ctu.mutation.ImageURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: containertracking.FieldImageURL,
		})
	}
	if ctu.mutation.ImageURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: containertracking.FieldImageURL,
		})
	}
	if value, ok := ctu.mutation.Manual(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: containertracking.FieldManual,
		})
	}
	if value, ok := ctu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: containertracking.FieldCreatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ctu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{containertracking.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ContainerTrackingUpdateOne is the builder for updating a single ContainerTracking entity.
type ContainerTrackingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ContainerTrackingMutation
}

// SetContainerID sets the "container_id" field.
func (ctuo *ContainerTrackingUpdateOne) SetContainerID(s string) *ContainerTrackingUpdateOne {
	ctuo.mutation.SetContainerID(s)
	return ctuo
}

// SetImageURL sets the "image_url" field.
func (ctuo *ContainerTrackingUpdateOne) SetImageURL(s string) *ContainerTrackingUpdateOne {
	ctuo.mutation.SetImageURL(s)
	return ctuo
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (ctuo *ContainerTrackingUpdateOne) SetNillableImageURL(s *string) *ContainerTrackingUpdateOne {
	if s != nil {
		ctuo.SetImageURL(*s)
	}
	return ctuo
}

// ClearImageURL clears the value of the "image_url" field.
func (ctuo *ContainerTrackingUpdateOne) ClearImageURL() *ContainerTrackingUpdateOne {
	ctuo.mutation.ClearImageURL()
	return ctuo
}

// SetManual sets the "manual" field.
func (ctuo *ContainerTrackingUpdateOne) SetManual(b bool) *ContainerTrackingUpdateOne {
	ctuo.mutation.SetManual(b)
	return ctuo
}

// SetNillableManual sets the "manual" field if the given value is not nil.
func (ctuo *ContainerTrackingUpdateOne) SetNillableManual(b *bool) *ContainerTrackingUpdateOne {
	if b != nil {
		ctuo.SetManual(*b)
	}
	return ctuo
}

// SetCreatedAt sets the "created_at" field.
func (ctuo *ContainerTrackingUpdateOne) SetCreatedAt(t time.Time) *ContainerTrackingUpdateOne {
	ctuo.mutation.SetCreatedAt(t)
	return ctuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ctuo *ContainerTrackingUpdateOne) SetNillableCreatedAt(t *time.Time) *ContainerTrackingUpdateOne {
	if t != nil {
		ctuo.SetCreatedAt(*t)
	}
	return ctuo
}

// Mutation returns the ContainerTrackingMutation object of the builder.
func (ctuo *ContainerTrackingUpdateOne) Mutation() *ContainerTrackingMutation {
	return ctuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ctuo *ContainerTrackingUpdateOne) Select(field string, fields ...string) *ContainerTrackingUpdateOne {
	ctuo.fields = append([]string{field}, fields...)
	return ctuo
}

// Save executes the query and returns the updated ContainerTracking entity.
func (ctuo *ContainerTrackingUpdateOne) Save(ctx context.Context) (*ContainerTracking, error) {
	var (
		err  error
		node *ContainerTracking
	)
	if len(ctuo.hooks) == 0 {
		node, err = ctuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ContainerTrackingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ctuo.mutation = mutation
			node, err = ctuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ctuo.hooks) - 1; i >= 0; i-- {
			mut = ctuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ctuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ctuo *ContainerTrackingUpdateOne) SaveX(ctx context.Context) *ContainerTracking {
	node, err := ctuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ctuo *ContainerTrackingUpdateOne) Exec(ctx context.Context) error {
	_, err := ctuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ctuo *ContainerTrackingUpdateOne) ExecX(ctx context.Context) {
	if err := ctuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ctuo *ContainerTrackingUpdateOne) sqlSave(ctx context.Context) (_node *ContainerTracking, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   containertracking.Table,
			Columns: containertracking.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: containertracking.FieldID,
			},
		},
	}
	id, ok := ctuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ContainerTracking.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := ctuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, containertracking.FieldID)
		for _, f := range fields {
			if !containertracking.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != containertracking.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ctuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ctuo.mutation.ContainerID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: containertracking.FieldContainerID,
		})
	}
	if value, ok := ctuo.mutation.ImageURL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: containertracking.FieldImageURL,
		})
	}
	if ctuo.mutation.ImageURLCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: containertracking.FieldImageURL,
		})
	}
	if value, ok := ctuo.mutation.Manual(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: containertracking.FieldManual,
		})
	}
	if value, ok := ctuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: containertracking.FieldCreatedAt,
		})
	}
	_node = &ContainerTracking{config: ctuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ctuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{containertracking.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
