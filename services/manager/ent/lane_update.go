// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/init-tech-solution/service-spitc-stream/services/manager/ent/camsetting"
	"github.com/init-tech-solution/service-spitc-stream/services/manager/ent/gate"
	"github.com/init-tech-solution/service-spitc-stream/services/manager/ent/lane"
	"github.com/init-tech-solution/service-spitc-stream/services/manager/ent/predicate"
)

// LaneUpdate is the builder for updating Lane entities.
type LaneUpdate struct {
	config
	hooks    []Hook
	mutation *LaneMutation
}

// Where appends a list predicates to the LaneUpdate builder.
func (lu *LaneUpdate) Where(ps ...predicate.Lane) *LaneUpdate {
	lu.mutation.Where(ps...)
	return lu
}

// SetName sets the "name" field.
func (lu *LaneUpdate) SetName(s string) *LaneUpdate {
	lu.mutation.SetName(s)
	return lu
}

// SetGateID sets the "gate_id" field.
func (lu *LaneUpdate) SetGateID(i int) *LaneUpdate {
	lu.mutation.SetGateID(i)
	return lu
}

// SetNillableGateID sets the "gate_id" field if the given value is not nil.
func (lu *LaneUpdate) SetNillableGateID(i *int) *LaneUpdate {
	if i != nil {
		lu.SetGateID(*i)
	}
	return lu
}

// ClearGateID clears the value of the "gate_id" field.
func (lu *LaneUpdate) ClearGateID() *LaneUpdate {
	lu.mutation.ClearGateID()
	return lu
}

// SetCreatedAt sets the "created_at" field.
func (lu *LaneUpdate) SetCreatedAt(t time.Time) *LaneUpdate {
	lu.mutation.SetCreatedAt(t)
	return lu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lu *LaneUpdate) SetNillableCreatedAt(t *time.Time) *LaneUpdate {
	if t != nil {
		lu.SetCreatedAt(*t)
	}
	return lu
}

// AddCamIDs adds the "cams" edge to the CamSetting entity by IDs.
func (lu *LaneUpdate) AddCamIDs(ids ...int) *LaneUpdate {
	lu.mutation.AddCamIDs(ids...)
	return lu
}

// AddCams adds the "cams" edges to the CamSetting entity.
func (lu *LaneUpdate) AddCams(c ...*CamSetting) *LaneUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return lu.AddCamIDs(ids...)
}

// SetGate sets the "gate" edge to the Gate entity.
func (lu *LaneUpdate) SetGate(g *Gate) *LaneUpdate {
	return lu.SetGateID(g.ID)
}

// Mutation returns the LaneMutation object of the builder.
func (lu *LaneUpdate) Mutation() *LaneMutation {
	return lu.mutation
}

// ClearCams clears all "cams" edges to the CamSetting entity.
func (lu *LaneUpdate) ClearCams() *LaneUpdate {
	lu.mutation.ClearCams()
	return lu
}

// RemoveCamIDs removes the "cams" edge to CamSetting entities by IDs.
func (lu *LaneUpdate) RemoveCamIDs(ids ...int) *LaneUpdate {
	lu.mutation.RemoveCamIDs(ids...)
	return lu
}

// RemoveCams removes "cams" edges to CamSetting entities.
func (lu *LaneUpdate) RemoveCams(c ...*CamSetting) *LaneUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return lu.RemoveCamIDs(ids...)
}

// ClearGate clears the "gate" edge to the Gate entity.
func (lu *LaneUpdate) ClearGate() *LaneUpdate {
	lu.mutation.ClearGate()
	return lu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lu *LaneUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(lu.hooks) == 0 {
		affected, err = lu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LaneMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			lu.mutation = mutation
			affected, err = lu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(lu.hooks) - 1; i >= 0; i-- {
			if lu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (lu *LaneUpdate) SaveX(ctx context.Context) int {
	affected, err := lu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lu *LaneUpdate) Exec(ctx context.Context) error {
	_, err := lu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lu *LaneUpdate) ExecX(ctx context.Context) {
	if err := lu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (lu *LaneUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   lane.Table,
			Columns: lane.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: lane.FieldID,
			},
		},
	}
	if ps := lu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: lane.FieldName,
		})
	}
	if value, ok := lu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: lane.FieldCreatedAt,
		})
	}
	if lu.mutation.CamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lane.CamsTable,
			Columns: []string{lane.CamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: camsetting.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.RemovedCamsIDs(); len(nodes) > 0 && !lu.mutation.CamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lane.CamsTable,
			Columns: []string{lane.CamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: camsetting.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.CamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lane.CamsTable,
			Columns: []string{lane.CamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: camsetting.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if lu.mutation.GateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lane.GateTable,
			Columns: []string{lane.GateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := lu.mutation.GateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lane.GateTable,
			Columns: []string{lane.GateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lane.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// LaneUpdateOne is the builder for updating a single Lane entity.
type LaneUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LaneMutation
}

// SetName sets the "name" field.
func (luo *LaneUpdateOne) SetName(s string) *LaneUpdateOne {
	luo.mutation.SetName(s)
	return luo
}

// SetGateID sets the "gate_id" field.
func (luo *LaneUpdateOne) SetGateID(i int) *LaneUpdateOne {
	luo.mutation.SetGateID(i)
	return luo
}

// SetNillableGateID sets the "gate_id" field if the given value is not nil.
func (luo *LaneUpdateOne) SetNillableGateID(i *int) *LaneUpdateOne {
	if i != nil {
		luo.SetGateID(*i)
	}
	return luo
}

// ClearGateID clears the value of the "gate_id" field.
func (luo *LaneUpdateOne) ClearGateID() *LaneUpdateOne {
	luo.mutation.ClearGateID()
	return luo
}

// SetCreatedAt sets the "created_at" field.
func (luo *LaneUpdateOne) SetCreatedAt(t time.Time) *LaneUpdateOne {
	luo.mutation.SetCreatedAt(t)
	return luo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (luo *LaneUpdateOne) SetNillableCreatedAt(t *time.Time) *LaneUpdateOne {
	if t != nil {
		luo.SetCreatedAt(*t)
	}
	return luo
}

// AddCamIDs adds the "cams" edge to the CamSetting entity by IDs.
func (luo *LaneUpdateOne) AddCamIDs(ids ...int) *LaneUpdateOne {
	luo.mutation.AddCamIDs(ids...)
	return luo
}

// AddCams adds the "cams" edges to the CamSetting entity.
func (luo *LaneUpdateOne) AddCams(c ...*CamSetting) *LaneUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return luo.AddCamIDs(ids...)
}

// SetGate sets the "gate" edge to the Gate entity.
func (luo *LaneUpdateOne) SetGate(g *Gate) *LaneUpdateOne {
	return luo.SetGateID(g.ID)
}

// Mutation returns the LaneMutation object of the builder.
func (luo *LaneUpdateOne) Mutation() *LaneMutation {
	return luo.mutation
}

// ClearCams clears all "cams" edges to the CamSetting entity.
func (luo *LaneUpdateOne) ClearCams() *LaneUpdateOne {
	luo.mutation.ClearCams()
	return luo
}

// RemoveCamIDs removes the "cams" edge to CamSetting entities by IDs.
func (luo *LaneUpdateOne) RemoveCamIDs(ids ...int) *LaneUpdateOne {
	luo.mutation.RemoveCamIDs(ids...)
	return luo
}

// RemoveCams removes "cams" edges to CamSetting entities.
func (luo *LaneUpdateOne) RemoveCams(c ...*CamSetting) *LaneUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return luo.RemoveCamIDs(ids...)
}

// ClearGate clears the "gate" edge to the Gate entity.
func (luo *LaneUpdateOne) ClearGate() *LaneUpdateOne {
	luo.mutation.ClearGate()
	return luo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (luo *LaneUpdateOne) Select(field string, fields ...string) *LaneUpdateOne {
	luo.fields = append([]string{field}, fields...)
	return luo
}

// Save executes the query and returns the updated Lane entity.
func (luo *LaneUpdateOne) Save(ctx context.Context) (*Lane, error) {
	var (
		err  error
		node *Lane
	)
	if len(luo.hooks) == 0 {
		node, err = luo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LaneMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			luo.mutation = mutation
			node, err = luo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(luo.hooks) - 1; i >= 0; i-- {
			if luo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = luo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, luo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (luo *LaneUpdateOne) SaveX(ctx context.Context) *Lane {
	node, err := luo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (luo *LaneUpdateOne) Exec(ctx context.Context) error {
	_, err := luo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (luo *LaneUpdateOne) ExecX(ctx context.Context) {
	if err := luo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (luo *LaneUpdateOne) sqlSave(ctx context.Context) (_node *Lane, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   lane.Table,
			Columns: lane.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: lane.FieldID,
			},
		},
	}
	id, ok := luo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Lane.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := luo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, lane.FieldID)
		for _, f := range fields {
			if !lane.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != lane.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := luo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := luo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: lane.FieldName,
		})
	}
	if value, ok := luo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: lane.FieldCreatedAt,
		})
	}
	if luo.mutation.CamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lane.CamsTable,
			Columns: []string{lane.CamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: camsetting.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.RemovedCamsIDs(); len(nodes) > 0 && !luo.mutation.CamsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lane.CamsTable,
			Columns: []string{lane.CamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: camsetting.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.CamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   lane.CamsTable,
			Columns: []string{lane.CamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: camsetting.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if luo.mutation.GateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lane.GateTable,
			Columns: []string{lane.GateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := luo.mutation.GateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   lane.GateTable,
			Columns: []string{lane.GateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Lane{config: luo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, luo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{lane.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
