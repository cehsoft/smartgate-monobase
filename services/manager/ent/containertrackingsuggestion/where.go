// Code generated by entc, DO NOT EDIT.

package containertrackingsuggestion

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/init-tech-solution/service-spitc-stream/services/manager/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ContainerID applies equality check predicate on the "container_id" field. It's identical to ContainerIDEQ.
func ContainerID(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContainerID), v))
	})
}

// Result applies equality check predicate on the "result" field. It's identical to ResultEQ.
func Result(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResult), v))
	})
}

// CamID applies equality check predicate on the "cam_id" field. It's identical to CamIDEQ.
func CamID(v int) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCamID), v))
	})
}

// TrackingID applies equality check predicate on the "tracking_id" field. It's identical to TrackingIDEQ.
func TrackingID(v int) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTrackingID), v))
	})
}

// TrackingType applies equality check predicate on the "tracking_type" field. It's identical to TrackingTypeEQ.
func TrackingType(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTrackingType), v))
	})
}

// Bic applies equality check predicate on the "bic" field. It's identical to BicEQ.
func Bic(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBic), v))
	})
}

// Serial applies equality check predicate on the "serial" field. It's identical to SerialEQ.
func Serial(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSerial), v))
	})
}

// Checksum applies equality check predicate on the "checksum" field. It's identical to ChecksumEQ.
func Checksum(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChecksum), v))
	})
}

// ImageURL applies equality check predicate on the "image_url" field. It's identical to ImageURLEQ.
func ImageURL(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImageURL), v))
	})
}

// Score applies equality check predicate on the "score" field. It's identical to ScoreEQ.
func Score(v float32) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScore), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// ContainerIDEQ applies the EQ predicate on the "container_id" field.
func ContainerIDEQ(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContainerID), v))
	})
}

// ContainerIDNEQ applies the NEQ predicate on the "container_id" field.
func ContainerIDNEQ(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContainerID), v))
	})
}

// ContainerIDIn applies the In predicate on the "container_id" field.
func ContainerIDIn(vs ...string) predicate.ContainerTrackingSuggestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldContainerID), v...))
	})
}

// ContainerIDNotIn applies the NotIn predicate on the "container_id" field.
func ContainerIDNotIn(vs ...string) predicate.ContainerTrackingSuggestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldContainerID), v...))
	})
}

// ContainerIDGT applies the GT predicate on the "container_id" field.
func ContainerIDGT(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContainerID), v))
	})
}

// ContainerIDGTE applies the GTE predicate on the "container_id" field.
func ContainerIDGTE(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContainerID), v))
	})
}

// ContainerIDLT applies the LT predicate on the "container_id" field.
func ContainerIDLT(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContainerID), v))
	})
}

// ContainerIDLTE applies the LTE predicate on the "container_id" field.
func ContainerIDLTE(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContainerID), v))
	})
}

// ContainerIDContains applies the Contains predicate on the "container_id" field.
func ContainerIDContains(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContainerID), v))
	})
}

// ContainerIDHasPrefix applies the HasPrefix predicate on the "container_id" field.
func ContainerIDHasPrefix(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContainerID), v))
	})
}

// ContainerIDHasSuffix applies the HasSuffix predicate on the "container_id" field.
func ContainerIDHasSuffix(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContainerID), v))
	})
}

// ContainerIDEqualFold applies the EqualFold predicate on the "container_id" field.
func ContainerIDEqualFold(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContainerID), v))
	})
}

// ContainerIDContainsFold applies the ContainsFold predicate on the "container_id" field.
func ContainerIDContainsFold(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContainerID), v))
	})
}

// ResultEQ applies the EQ predicate on the "result" field.
func ResultEQ(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResult), v))
	})
}

// ResultNEQ applies the NEQ predicate on the "result" field.
func ResultNEQ(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldResult), v))
	})
}

// ResultIn applies the In predicate on the "result" field.
func ResultIn(vs ...string) predicate.ContainerTrackingSuggestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldResult), v...))
	})
}

// ResultNotIn applies the NotIn predicate on the "result" field.
func ResultNotIn(vs ...string) predicate.ContainerTrackingSuggestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldResult), v...))
	})
}

// ResultGT applies the GT predicate on the "result" field.
func ResultGT(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldResult), v))
	})
}

// ResultGTE applies the GTE predicate on the "result" field.
func ResultGTE(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldResult), v))
	})
}

// ResultLT applies the LT predicate on the "result" field.
func ResultLT(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldResult), v))
	})
}

// ResultLTE applies the LTE predicate on the "result" field.
func ResultLTE(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldResult), v))
	})
}

// ResultContains applies the Contains predicate on the "result" field.
func ResultContains(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldResult), v))
	})
}

// ResultHasPrefix applies the HasPrefix predicate on the "result" field.
func ResultHasPrefix(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldResult), v))
	})
}

// ResultHasSuffix applies the HasSuffix predicate on the "result" field.
func ResultHasSuffix(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldResult), v))
	})
}

// ResultIsNil applies the IsNil predicate on the "result" field.
func ResultIsNil() predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldResult)))
	})
}

// ResultNotNil applies the NotNil predicate on the "result" field.
func ResultNotNil() predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldResult)))
	})
}

// ResultEqualFold applies the EqualFold predicate on the "result" field.
func ResultEqualFold(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldResult), v))
	})
}

// ResultContainsFold applies the ContainsFold predicate on the "result" field.
func ResultContainsFold(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldResult), v))
	})
}

// CamIDEQ applies the EQ predicate on the "cam_id" field.
func CamIDEQ(v int) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCamID), v))
	})
}

// CamIDNEQ applies the NEQ predicate on the "cam_id" field.
func CamIDNEQ(v int) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCamID), v))
	})
}

// CamIDIn applies the In predicate on the "cam_id" field.
func CamIDIn(vs ...int) predicate.ContainerTrackingSuggestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCamID), v...))
	})
}

// CamIDNotIn applies the NotIn predicate on the "cam_id" field.
func CamIDNotIn(vs ...int) predicate.ContainerTrackingSuggestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCamID), v...))
	})
}

// CamIDIsNil applies the IsNil predicate on the "cam_id" field.
func CamIDIsNil() predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCamID)))
	})
}

// CamIDNotNil applies the NotNil predicate on the "cam_id" field.
func CamIDNotNil() predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCamID)))
	})
}

// TrackingIDEQ applies the EQ predicate on the "tracking_id" field.
func TrackingIDEQ(v int) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTrackingID), v))
	})
}

// TrackingIDNEQ applies the NEQ predicate on the "tracking_id" field.
func TrackingIDNEQ(v int) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTrackingID), v))
	})
}

// TrackingIDIn applies the In predicate on the "tracking_id" field.
func TrackingIDIn(vs ...int) predicate.ContainerTrackingSuggestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTrackingID), v...))
	})
}

// TrackingIDNotIn applies the NotIn predicate on the "tracking_id" field.
func TrackingIDNotIn(vs ...int) predicate.ContainerTrackingSuggestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTrackingID), v...))
	})
}

// TrackingIDIsNil applies the IsNil predicate on the "tracking_id" field.
func TrackingIDIsNil() predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTrackingID)))
	})
}

// TrackingIDNotNil applies the NotNil predicate on the "tracking_id" field.
func TrackingIDNotNil() predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTrackingID)))
	})
}

// TrackingTypeEQ applies the EQ predicate on the "tracking_type" field.
func TrackingTypeEQ(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTrackingType), v))
	})
}

// TrackingTypeNEQ applies the NEQ predicate on the "tracking_type" field.
func TrackingTypeNEQ(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTrackingType), v))
	})
}

// TrackingTypeIn applies the In predicate on the "tracking_type" field.
func TrackingTypeIn(vs ...string) predicate.ContainerTrackingSuggestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTrackingType), v...))
	})
}

// TrackingTypeNotIn applies the NotIn predicate on the "tracking_type" field.
func TrackingTypeNotIn(vs ...string) predicate.ContainerTrackingSuggestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTrackingType), v...))
	})
}

// TrackingTypeGT applies the GT predicate on the "tracking_type" field.
func TrackingTypeGT(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTrackingType), v))
	})
}

// TrackingTypeGTE applies the GTE predicate on the "tracking_type" field.
func TrackingTypeGTE(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTrackingType), v))
	})
}

// TrackingTypeLT applies the LT predicate on the "tracking_type" field.
func TrackingTypeLT(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTrackingType), v))
	})
}

// TrackingTypeLTE applies the LTE predicate on the "tracking_type" field.
func TrackingTypeLTE(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTrackingType), v))
	})
}

// TrackingTypeContains applies the Contains predicate on the "tracking_type" field.
func TrackingTypeContains(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTrackingType), v))
	})
}

// TrackingTypeHasPrefix applies the HasPrefix predicate on the "tracking_type" field.
func TrackingTypeHasPrefix(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTrackingType), v))
	})
}

// TrackingTypeHasSuffix applies the HasSuffix predicate on the "tracking_type" field.
func TrackingTypeHasSuffix(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTrackingType), v))
	})
}

// TrackingTypeIsNil applies the IsNil predicate on the "tracking_type" field.
func TrackingTypeIsNil() predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTrackingType)))
	})
}

// TrackingTypeNotNil applies the NotNil predicate on the "tracking_type" field.
func TrackingTypeNotNil() predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTrackingType)))
	})
}

// TrackingTypeEqualFold applies the EqualFold predicate on the "tracking_type" field.
func TrackingTypeEqualFold(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTrackingType), v))
	})
}

// TrackingTypeContainsFold applies the ContainsFold predicate on the "tracking_type" field.
func TrackingTypeContainsFold(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTrackingType), v))
	})
}

// BicEQ applies the EQ predicate on the "bic" field.
func BicEQ(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBic), v))
	})
}

// BicNEQ applies the NEQ predicate on the "bic" field.
func BicNEQ(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBic), v))
	})
}

// BicIn applies the In predicate on the "bic" field.
func BicIn(vs ...string) predicate.ContainerTrackingSuggestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBic), v...))
	})
}

// BicNotIn applies the NotIn predicate on the "bic" field.
func BicNotIn(vs ...string) predicate.ContainerTrackingSuggestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBic), v...))
	})
}

// BicGT applies the GT predicate on the "bic" field.
func BicGT(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBic), v))
	})
}

// BicGTE applies the GTE predicate on the "bic" field.
func BicGTE(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBic), v))
	})
}

// BicLT applies the LT predicate on the "bic" field.
func BicLT(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBic), v))
	})
}

// BicLTE applies the LTE predicate on the "bic" field.
func BicLTE(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBic), v))
	})
}

// BicContains applies the Contains predicate on the "bic" field.
func BicContains(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBic), v))
	})
}

// BicHasPrefix applies the HasPrefix predicate on the "bic" field.
func BicHasPrefix(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBic), v))
	})
}

// BicHasSuffix applies the HasSuffix predicate on the "bic" field.
func BicHasSuffix(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBic), v))
	})
}

// BicIsNil applies the IsNil predicate on the "bic" field.
func BicIsNil() predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBic)))
	})
}

// BicNotNil applies the NotNil predicate on the "bic" field.
func BicNotNil() predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBic)))
	})
}

// BicEqualFold applies the EqualFold predicate on the "bic" field.
func BicEqualFold(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBic), v))
	})
}

// BicContainsFold applies the ContainsFold predicate on the "bic" field.
func BicContainsFold(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBic), v))
	})
}

// SerialEQ applies the EQ predicate on the "serial" field.
func SerialEQ(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSerial), v))
	})
}

// SerialNEQ applies the NEQ predicate on the "serial" field.
func SerialNEQ(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSerial), v))
	})
}

// SerialIn applies the In predicate on the "serial" field.
func SerialIn(vs ...string) predicate.ContainerTrackingSuggestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSerial), v...))
	})
}

// SerialNotIn applies the NotIn predicate on the "serial" field.
func SerialNotIn(vs ...string) predicate.ContainerTrackingSuggestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSerial), v...))
	})
}

// SerialGT applies the GT predicate on the "serial" field.
func SerialGT(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSerial), v))
	})
}

// SerialGTE applies the GTE predicate on the "serial" field.
func SerialGTE(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSerial), v))
	})
}

// SerialLT applies the LT predicate on the "serial" field.
func SerialLT(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSerial), v))
	})
}

// SerialLTE applies the LTE predicate on the "serial" field.
func SerialLTE(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSerial), v))
	})
}

// SerialContains applies the Contains predicate on the "serial" field.
func SerialContains(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSerial), v))
	})
}

// SerialHasPrefix applies the HasPrefix predicate on the "serial" field.
func SerialHasPrefix(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSerial), v))
	})
}

// SerialHasSuffix applies the HasSuffix predicate on the "serial" field.
func SerialHasSuffix(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSerial), v))
	})
}

// SerialIsNil applies the IsNil predicate on the "serial" field.
func SerialIsNil() predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSerial)))
	})
}

// SerialNotNil applies the NotNil predicate on the "serial" field.
func SerialNotNil() predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSerial)))
	})
}

// SerialEqualFold applies the EqualFold predicate on the "serial" field.
func SerialEqualFold(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSerial), v))
	})
}

// SerialContainsFold applies the ContainsFold predicate on the "serial" field.
func SerialContainsFold(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSerial), v))
	})
}

// ChecksumEQ applies the EQ predicate on the "checksum" field.
func ChecksumEQ(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChecksum), v))
	})
}

// ChecksumNEQ applies the NEQ predicate on the "checksum" field.
func ChecksumNEQ(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChecksum), v))
	})
}

// ChecksumIn applies the In predicate on the "checksum" field.
func ChecksumIn(vs ...string) predicate.ContainerTrackingSuggestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldChecksum), v...))
	})
}

// ChecksumNotIn applies the NotIn predicate on the "checksum" field.
func ChecksumNotIn(vs ...string) predicate.ContainerTrackingSuggestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldChecksum), v...))
	})
}

// ChecksumGT applies the GT predicate on the "checksum" field.
func ChecksumGT(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldChecksum), v))
	})
}

// ChecksumGTE applies the GTE predicate on the "checksum" field.
func ChecksumGTE(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldChecksum), v))
	})
}

// ChecksumLT applies the LT predicate on the "checksum" field.
func ChecksumLT(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldChecksum), v))
	})
}

// ChecksumLTE applies the LTE predicate on the "checksum" field.
func ChecksumLTE(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldChecksum), v))
	})
}

// ChecksumContains applies the Contains predicate on the "checksum" field.
func ChecksumContains(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldChecksum), v))
	})
}

// ChecksumHasPrefix applies the HasPrefix predicate on the "checksum" field.
func ChecksumHasPrefix(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldChecksum), v))
	})
}

// ChecksumHasSuffix applies the HasSuffix predicate on the "checksum" field.
func ChecksumHasSuffix(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldChecksum), v))
	})
}

// ChecksumIsNil applies the IsNil predicate on the "checksum" field.
func ChecksumIsNil() predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldChecksum)))
	})
}

// ChecksumNotNil applies the NotNil predicate on the "checksum" field.
func ChecksumNotNil() predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldChecksum)))
	})
}

// ChecksumEqualFold applies the EqualFold predicate on the "checksum" field.
func ChecksumEqualFold(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldChecksum), v))
	})
}

// ChecksumContainsFold applies the ContainsFold predicate on the "checksum" field.
func ChecksumContainsFold(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldChecksum), v))
	})
}

// ImageURLEQ applies the EQ predicate on the "image_url" field.
func ImageURLEQ(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImageURL), v))
	})
}

// ImageURLNEQ applies the NEQ predicate on the "image_url" field.
func ImageURLNEQ(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldImageURL), v))
	})
}

// ImageURLIn applies the In predicate on the "image_url" field.
func ImageURLIn(vs ...string) predicate.ContainerTrackingSuggestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldImageURL), v...))
	})
}

// ImageURLNotIn applies the NotIn predicate on the "image_url" field.
func ImageURLNotIn(vs ...string) predicate.ContainerTrackingSuggestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldImageURL), v...))
	})
}

// ImageURLGT applies the GT predicate on the "image_url" field.
func ImageURLGT(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldImageURL), v))
	})
}

// ImageURLGTE applies the GTE predicate on the "image_url" field.
func ImageURLGTE(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldImageURL), v))
	})
}

// ImageURLLT applies the LT predicate on the "image_url" field.
func ImageURLLT(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldImageURL), v))
	})
}

// ImageURLLTE applies the LTE predicate on the "image_url" field.
func ImageURLLTE(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldImageURL), v))
	})
}

// ImageURLContains applies the Contains predicate on the "image_url" field.
func ImageURLContains(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldImageURL), v))
	})
}

// ImageURLHasPrefix applies the HasPrefix predicate on the "image_url" field.
func ImageURLHasPrefix(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldImageURL), v))
	})
}

// ImageURLHasSuffix applies the HasSuffix predicate on the "image_url" field.
func ImageURLHasSuffix(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldImageURL), v))
	})
}

// ImageURLIsNil applies the IsNil predicate on the "image_url" field.
func ImageURLIsNil() predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldImageURL)))
	})
}

// ImageURLNotNil applies the NotNil predicate on the "image_url" field.
func ImageURLNotNil() predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldImageURL)))
	})
}

// ImageURLEqualFold applies the EqualFold predicate on the "image_url" field.
func ImageURLEqualFold(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldImageURL), v))
	})
}

// ImageURLContainsFold applies the ContainsFold predicate on the "image_url" field.
func ImageURLContainsFold(v string) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldImageURL), v))
	})
}

// ScoreEQ applies the EQ predicate on the "score" field.
func ScoreEQ(v float32) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldScore), v))
	})
}

// ScoreNEQ applies the NEQ predicate on the "score" field.
func ScoreNEQ(v float32) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldScore), v))
	})
}

// ScoreIn applies the In predicate on the "score" field.
func ScoreIn(vs ...float32) predicate.ContainerTrackingSuggestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldScore), v...))
	})
}

// ScoreNotIn applies the NotIn predicate on the "score" field.
func ScoreNotIn(vs ...float32) predicate.ContainerTrackingSuggestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldScore), v...))
	})
}

// ScoreGT applies the GT predicate on the "score" field.
func ScoreGT(v float32) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldScore), v))
	})
}

// ScoreGTE applies the GTE predicate on the "score" field.
func ScoreGTE(v float32) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldScore), v))
	})
}

// ScoreLT applies the LT predicate on the "score" field.
func ScoreLT(v float32) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldScore), v))
	})
}

// ScoreLTE applies the LTE predicate on the "score" field.
func ScoreLTE(v float32) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldScore), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ContainerTrackingSuggestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ContainerTrackingSuggestion {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// HasCam applies the HasEdge predicate on the "cam" edge.
func HasCam() predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CamTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CamTable, CamColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCamWith applies the HasEdge predicate on the "cam" edge with a given conditions (other predicates).
func HasCamWith(preds ...predicate.CamSetting) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CamInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CamTable, CamColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTracking applies the HasEdge predicate on the "tracking" edge.
func HasTracking() predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TrackingTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TrackingTable, TrackingColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTrackingWith applies the HasEdge predicate on the "tracking" edge with a given conditions (other predicates).
func HasTrackingWith(preds ...predicate.ContainerTracking) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TrackingInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TrackingTable, TrackingColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ContainerTrackingSuggestion) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ContainerTrackingSuggestion) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ContainerTrackingSuggestion) predicate.ContainerTrackingSuggestion {
	return predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
		p(s.Not())
	})
}
