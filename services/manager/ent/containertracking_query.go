// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/init-tech-solution/service-spitc-stream/services/manager/ent/containertracking"
	"github.com/init-tech-solution/service-spitc-stream/services/manager/ent/containertrackingsuggestion"
	"github.com/init-tech-solution/service-spitc-stream/services/manager/ent/predicate"
)

// ContainerTrackingQuery is the builder for querying ContainerTracking entities.
type ContainerTrackingQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.ContainerTracking
	// eager-loading edges.
	withSuggestions *ContainerTrackingSuggestionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ContainerTrackingQuery builder.
func (ctq *ContainerTrackingQuery) Where(ps ...predicate.ContainerTracking) *ContainerTrackingQuery {
	ctq.predicates = append(ctq.predicates, ps...)
	return ctq
}

// Limit adds a limit step to the query.
func (ctq *ContainerTrackingQuery) Limit(limit int) *ContainerTrackingQuery {
	ctq.limit = &limit
	return ctq
}

// Offset adds an offset step to the query.
func (ctq *ContainerTrackingQuery) Offset(offset int) *ContainerTrackingQuery {
	ctq.offset = &offset
	return ctq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ctq *ContainerTrackingQuery) Unique(unique bool) *ContainerTrackingQuery {
	ctq.unique = &unique
	return ctq
}

// Order adds an order step to the query.
func (ctq *ContainerTrackingQuery) Order(o ...OrderFunc) *ContainerTrackingQuery {
	ctq.order = append(ctq.order, o...)
	return ctq
}

// QuerySuggestions chains the current query on the "suggestions" edge.
func (ctq *ContainerTrackingQuery) QuerySuggestions() *ContainerTrackingSuggestionQuery {
	query := &ContainerTrackingSuggestionQuery{config: ctq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ctq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ctq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(containertracking.Table, containertracking.FieldID, selector),
			sqlgraph.To(containertrackingsuggestion.Table, containertrackingsuggestion.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, containertracking.SuggestionsTable, containertracking.SuggestionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(ctq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ContainerTracking entity from the query.
// Returns a *NotFoundError when no ContainerTracking was found.
func (ctq *ContainerTrackingQuery) First(ctx context.Context) (*ContainerTracking, error) {
	nodes, err := ctq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{containertracking.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ctq *ContainerTrackingQuery) FirstX(ctx context.Context) *ContainerTracking {
	node, err := ctq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ContainerTracking ID from the query.
// Returns a *NotFoundError when no ContainerTracking ID was found.
func (ctq *ContainerTrackingQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ctq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{containertracking.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ctq *ContainerTrackingQuery) FirstIDX(ctx context.Context) int {
	id, err := ctq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ContainerTracking entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one ContainerTracking entity is not found.
// Returns a *NotFoundError when no ContainerTracking entities are found.
func (ctq *ContainerTrackingQuery) Only(ctx context.Context) (*ContainerTracking, error) {
	nodes, err := ctq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{containertracking.Label}
	default:
		return nil, &NotSingularError{containertracking.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ctq *ContainerTrackingQuery) OnlyX(ctx context.Context) *ContainerTracking {
	node, err := ctq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ContainerTracking ID in the query.
// Returns a *NotSingularError when exactly one ContainerTracking ID is not found.
// Returns a *NotFoundError when no entities are found.
func (ctq *ContainerTrackingQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ctq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{containertracking.Label}
	default:
		err = &NotSingularError{containertracking.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ctq *ContainerTrackingQuery) OnlyIDX(ctx context.Context) int {
	id, err := ctq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ContainerTrackings.
func (ctq *ContainerTrackingQuery) All(ctx context.Context) ([]*ContainerTracking, error) {
	if err := ctq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return ctq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (ctq *ContainerTrackingQuery) AllX(ctx context.Context) []*ContainerTracking {
	nodes, err := ctq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ContainerTracking IDs.
func (ctq *ContainerTrackingQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := ctq.Select(containertracking.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ctq *ContainerTrackingQuery) IDsX(ctx context.Context) []int {
	ids, err := ctq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ctq *ContainerTrackingQuery) Count(ctx context.Context) (int, error) {
	if err := ctq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return ctq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (ctq *ContainerTrackingQuery) CountX(ctx context.Context) int {
	count, err := ctq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ctq *ContainerTrackingQuery) Exist(ctx context.Context) (bool, error) {
	if err := ctq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return ctq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (ctq *ContainerTrackingQuery) ExistX(ctx context.Context) bool {
	exist, err := ctq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ContainerTrackingQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ctq *ContainerTrackingQuery) Clone() *ContainerTrackingQuery {
	if ctq == nil {
		return nil
	}
	return &ContainerTrackingQuery{
		config:          ctq.config,
		limit:           ctq.limit,
		offset:          ctq.offset,
		order:           append([]OrderFunc{}, ctq.order...),
		predicates:      append([]predicate.ContainerTracking{}, ctq.predicates...),
		withSuggestions: ctq.withSuggestions.Clone(),
		// clone intermediate query.
		sql:  ctq.sql.Clone(),
		path: ctq.path,
	}
}

// WithSuggestions tells the query-builder to eager-load the nodes that are connected to
// the "suggestions" edge. The optional arguments are used to configure the query builder of the edge.
func (ctq *ContainerTrackingQuery) WithSuggestions(opts ...func(*ContainerTrackingSuggestionQuery)) *ContainerTrackingQuery {
	query := &ContainerTrackingSuggestionQuery{config: ctq.config}
	for _, opt := range opts {
		opt(query)
	}
	ctq.withSuggestions = query
	return ctq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ContainerID string `json:"container_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ContainerTracking.Query().
//		GroupBy(containertracking.FieldContainerID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (ctq *ContainerTrackingQuery) GroupBy(field string, fields ...string) *ContainerTrackingGroupBy {
	group := &ContainerTrackingGroupBy{config: ctq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ctq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ctq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ContainerID string `json:"container_id,omitempty"`
//	}
//
//	client.ContainerTracking.Query().
//		Select(containertracking.FieldContainerID).
//		Scan(ctx, &v)
//
func (ctq *ContainerTrackingQuery) Select(field string, fields ...string) *ContainerTrackingSelect {
	ctq.fields = append([]string{field}, fields...)
	return &ContainerTrackingSelect{ContainerTrackingQuery: ctq}
}

func (ctq *ContainerTrackingQuery) prepareQuery(ctx context.Context) error {
	for _, f := range ctq.fields {
		if !containertracking.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ctq.path != nil {
		prev, err := ctq.path(ctx)
		if err != nil {
			return err
		}
		ctq.sql = prev
	}
	return nil
}

func (ctq *ContainerTrackingQuery) sqlAll(ctx context.Context) ([]*ContainerTracking, error) {
	var (
		nodes       = []*ContainerTracking{}
		_spec       = ctq.querySpec()
		loadedTypes = [1]bool{
			ctq.withSuggestions != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &ContainerTracking{config: ctq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, ctq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := ctq.withSuggestions; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*ContainerTracking)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Suggestions = []*ContainerTrackingSuggestion{}
		}
		query.Where(predicate.ContainerTrackingSuggestion(func(s *sql.Selector) {
			s.Where(sql.InValues(containertracking.SuggestionsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.TrackingID
			node, ok := nodeids[fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "tracking_id" returned %v for node %v`, fk, n.ID)
			}
			node.Edges.Suggestions = append(node.Edges.Suggestions, n)
		}
	}

	return nodes, nil
}

func (ctq *ContainerTrackingQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ctq.querySpec()
	return sqlgraph.CountNodes(ctx, ctq.driver, _spec)
}

func (ctq *ContainerTrackingQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := ctq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (ctq *ContainerTrackingQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   containertracking.Table,
			Columns: containertracking.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: containertracking.FieldID,
			},
		},
		From:   ctq.sql,
		Unique: true,
	}
	if unique := ctq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := ctq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, containertracking.FieldID)
		for i := range fields {
			if fields[i] != containertracking.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ctq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ctq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ctq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ctq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ctq *ContainerTrackingQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ctq.driver.Dialect())
	t1 := builder.Table(containertracking.Table)
	selector := builder.Select(t1.Columns(containertracking.Columns...)...).From(t1)
	if ctq.sql != nil {
		selector = ctq.sql
		selector.Select(selector.Columns(containertracking.Columns...)...)
	}
	for _, p := range ctq.predicates {
		p(selector)
	}
	for _, p := range ctq.order {
		p(selector)
	}
	if offset := ctq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ctq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ContainerTrackingGroupBy is the group-by builder for ContainerTracking entities.
type ContainerTrackingGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ctgb *ContainerTrackingGroupBy) Aggregate(fns ...AggregateFunc) *ContainerTrackingGroupBy {
	ctgb.fns = append(ctgb.fns, fns...)
	return ctgb
}

// Scan applies the group-by query and scans the result into the given value.
func (ctgb *ContainerTrackingGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := ctgb.path(ctx)
	if err != nil {
		return err
	}
	ctgb.sql = query
	return ctgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ctgb *ContainerTrackingGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := ctgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (ctgb *ContainerTrackingGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(ctgb.fields) > 1 {
		return nil, errors.New("ent: ContainerTrackingGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := ctgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ctgb *ContainerTrackingGroupBy) StringsX(ctx context.Context) []string {
	v, err := ctgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ctgb *ContainerTrackingGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ctgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{containertracking.Label}
	default:
		err = fmt.Errorf("ent: ContainerTrackingGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ctgb *ContainerTrackingGroupBy) StringX(ctx context.Context) string {
	v, err := ctgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (ctgb *ContainerTrackingGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(ctgb.fields) > 1 {
		return nil, errors.New("ent: ContainerTrackingGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := ctgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ctgb *ContainerTrackingGroupBy) IntsX(ctx context.Context) []int {
	v, err := ctgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ctgb *ContainerTrackingGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ctgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{containertracking.Label}
	default:
		err = fmt.Errorf("ent: ContainerTrackingGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ctgb *ContainerTrackingGroupBy) IntX(ctx context.Context) int {
	v, err := ctgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (ctgb *ContainerTrackingGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(ctgb.fields) > 1 {
		return nil, errors.New("ent: ContainerTrackingGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := ctgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ctgb *ContainerTrackingGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := ctgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ctgb *ContainerTrackingGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ctgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{containertracking.Label}
	default:
		err = fmt.Errorf("ent: ContainerTrackingGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ctgb *ContainerTrackingGroupBy) Float64X(ctx context.Context) float64 {
	v, err := ctgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (ctgb *ContainerTrackingGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(ctgb.fields) > 1 {
		return nil, errors.New("ent: ContainerTrackingGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := ctgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ctgb *ContainerTrackingGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := ctgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (ctgb *ContainerTrackingGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ctgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{containertracking.Label}
	default:
		err = fmt.Errorf("ent: ContainerTrackingGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ctgb *ContainerTrackingGroupBy) BoolX(ctx context.Context) bool {
	v, err := ctgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ctgb *ContainerTrackingGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range ctgb.fields {
		if !containertracking.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ctgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ctgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ctgb *ContainerTrackingGroupBy) sqlQuery() *sql.Selector {
	selector := ctgb.sql
	columns := make([]string, 0, len(ctgb.fields)+len(ctgb.fns))
	columns = append(columns, ctgb.fields...)
	for _, fn := range ctgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(ctgb.fields...)
}

// ContainerTrackingSelect is the builder for selecting fields of ContainerTracking entities.
type ContainerTrackingSelect struct {
	*ContainerTrackingQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (cts *ContainerTrackingSelect) Scan(ctx context.Context, v interface{}) error {
	if err := cts.prepareQuery(ctx); err != nil {
		return err
	}
	cts.sql = cts.ContainerTrackingQuery.sqlQuery(ctx)
	return cts.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (cts *ContainerTrackingSelect) ScanX(ctx context.Context, v interface{}) {
	if err := cts.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (cts *ContainerTrackingSelect) Strings(ctx context.Context) ([]string, error) {
	if len(cts.fields) > 1 {
		return nil, errors.New("ent: ContainerTrackingSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := cts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (cts *ContainerTrackingSelect) StringsX(ctx context.Context) []string {
	v, err := cts.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (cts *ContainerTrackingSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = cts.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{containertracking.Label}
	default:
		err = fmt.Errorf("ent: ContainerTrackingSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (cts *ContainerTrackingSelect) StringX(ctx context.Context) string {
	v, err := cts.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (cts *ContainerTrackingSelect) Ints(ctx context.Context) ([]int, error) {
	if len(cts.fields) > 1 {
		return nil, errors.New("ent: ContainerTrackingSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := cts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (cts *ContainerTrackingSelect) IntsX(ctx context.Context) []int {
	v, err := cts.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (cts *ContainerTrackingSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = cts.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{containertracking.Label}
	default:
		err = fmt.Errorf("ent: ContainerTrackingSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (cts *ContainerTrackingSelect) IntX(ctx context.Context) int {
	v, err := cts.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (cts *ContainerTrackingSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(cts.fields) > 1 {
		return nil, errors.New("ent: ContainerTrackingSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := cts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (cts *ContainerTrackingSelect) Float64sX(ctx context.Context) []float64 {
	v, err := cts.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (cts *ContainerTrackingSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = cts.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{containertracking.Label}
	default:
		err = fmt.Errorf("ent: ContainerTrackingSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (cts *ContainerTrackingSelect) Float64X(ctx context.Context) float64 {
	v, err := cts.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (cts *ContainerTrackingSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(cts.fields) > 1 {
		return nil, errors.New("ent: ContainerTrackingSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := cts.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (cts *ContainerTrackingSelect) BoolsX(ctx context.Context) []bool {
	v, err := cts.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (cts *ContainerTrackingSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = cts.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{containertracking.Label}
	default:
		err = fmt.Errorf("ent: ContainerTrackingSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (cts *ContainerTrackingSelect) BoolX(ctx context.Context) bool {
	v, err := cts.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cts *ContainerTrackingSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := cts.sqlQuery().Query()
	if err := cts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (cts *ContainerTrackingSelect) sqlQuery() sql.Querier {
	selector := cts.sql
	selector.Select(selector.Columns(cts.fields...)...)
	return selector
}
