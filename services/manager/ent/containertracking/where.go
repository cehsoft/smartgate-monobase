// Code generated by entc, DO NOT EDIT.

package containertracking

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/init-tech-solution/service-spitc-stream/services/manager/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ContainerID applies equality check predicate on the "container_id" field. It's identical to ContainerIDEQ.
func ContainerID(v string) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContainerID), v))
	})
}

// SessionID applies equality check predicate on the "session_id" field. It's identical to SessionIDEQ.
func SessionID(v string) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSessionID), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// ContainerIDEQ applies the EQ predicate on the "container_id" field.
func ContainerIDEQ(v string) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldContainerID), v))
	})
}

// ContainerIDNEQ applies the NEQ predicate on the "container_id" field.
func ContainerIDNEQ(v string) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldContainerID), v))
	})
}

// ContainerIDIn applies the In predicate on the "container_id" field.
func ContainerIDIn(vs ...string) predicate.ContainerTracking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ContainerTracking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldContainerID), v...))
	})
}

// ContainerIDNotIn applies the NotIn predicate on the "container_id" field.
func ContainerIDNotIn(vs ...string) predicate.ContainerTracking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ContainerTracking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldContainerID), v...))
	})
}

// ContainerIDGT applies the GT predicate on the "container_id" field.
func ContainerIDGT(v string) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldContainerID), v))
	})
}

// ContainerIDGTE applies the GTE predicate on the "container_id" field.
func ContainerIDGTE(v string) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldContainerID), v))
	})
}

// ContainerIDLT applies the LT predicate on the "container_id" field.
func ContainerIDLT(v string) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldContainerID), v))
	})
}

// ContainerIDLTE applies the LTE predicate on the "container_id" field.
func ContainerIDLTE(v string) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldContainerID), v))
	})
}

// ContainerIDContains applies the Contains predicate on the "container_id" field.
func ContainerIDContains(v string) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldContainerID), v))
	})
}

// ContainerIDHasPrefix applies the HasPrefix predicate on the "container_id" field.
func ContainerIDHasPrefix(v string) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldContainerID), v))
	})
}

// ContainerIDHasSuffix applies the HasSuffix predicate on the "container_id" field.
func ContainerIDHasSuffix(v string) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldContainerID), v))
	})
}

// ContainerIDEqualFold applies the EqualFold predicate on the "container_id" field.
func ContainerIDEqualFold(v string) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldContainerID), v))
	})
}

// ContainerIDContainsFold applies the ContainsFold predicate on the "container_id" field.
func ContainerIDContainsFold(v string) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldContainerID), v))
	})
}

// SessionIDEQ applies the EQ predicate on the "session_id" field.
func SessionIDEQ(v string) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSessionID), v))
	})
}

// SessionIDNEQ applies the NEQ predicate on the "session_id" field.
func SessionIDNEQ(v string) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSessionID), v))
	})
}

// SessionIDIn applies the In predicate on the "session_id" field.
func SessionIDIn(vs ...string) predicate.ContainerTracking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ContainerTracking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSessionID), v...))
	})
}

// SessionIDNotIn applies the NotIn predicate on the "session_id" field.
func SessionIDNotIn(vs ...string) predicate.ContainerTracking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ContainerTracking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSessionID), v...))
	})
}

// SessionIDGT applies the GT predicate on the "session_id" field.
func SessionIDGT(v string) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSessionID), v))
	})
}

// SessionIDGTE applies the GTE predicate on the "session_id" field.
func SessionIDGTE(v string) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSessionID), v))
	})
}

// SessionIDLT applies the LT predicate on the "session_id" field.
func SessionIDLT(v string) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSessionID), v))
	})
}

// SessionIDLTE applies the LTE predicate on the "session_id" field.
func SessionIDLTE(v string) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSessionID), v))
	})
}

// SessionIDContains applies the Contains predicate on the "session_id" field.
func SessionIDContains(v string) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSessionID), v))
	})
}

// SessionIDHasPrefix applies the HasPrefix predicate on the "session_id" field.
func SessionIDHasPrefix(v string) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSessionID), v))
	})
}

// SessionIDHasSuffix applies the HasSuffix predicate on the "session_id" field.
func SessionIDHasSuffix(v string) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSessionID), v))
	})
}

// SessionIDIsNil applies the IsNil predicate on the "session_id" field.
func SessionIDIsNil() predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSessionID)))
	})
}

// SessionIDNotNil applies the NotNil predicate on the "session_id" field.
func SessionIDNotNil() predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSessionID)))
	})
}

// SessionIDEqualFold applies the EqualFold predicate on the "session_id" field.
func SessionIDEqualFold(v string) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSessionID), v))
	})
}

// SessionIDContainsFold applies the ContainsFold predicate on the "session_id" field.
func SessionIDContainsFold(v string) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSessionID), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ContainerTracking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ContainerTracking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ContainerTracking {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ContainerTracking(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// HasSuggestions applies the HasEdge predicate on the "suggestions" edge.
func HasSuggestions() predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SuggestionsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SuggestionsTable, SuggestionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSuggestionsWith applies the HasEdge predicate on the "suggestions" edge with a given conditions (other predicates).
func HasSuggestionsWith(preds ...predicate.ContainerTrackingSuggestion) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SuggestionsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SuggestionsTable, SuggestionsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ContainerTracking) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ContainerTracking) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ContainerTracking) predicate.ContainerTracking {
	return predicate.ContainerTracking(func(s *sql.Selector) {
		p(s.Not())
	})
}
