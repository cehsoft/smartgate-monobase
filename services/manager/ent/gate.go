// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/init-tech-solution/service-spitc-stream/services/manager/ent/gate"
)

// Gate is the model entity for the Gate schema.
type Gate struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GateQuery when eager-loading is set.
	Edges GateEdges `json:"edges"`
}

// GateEdges holds the relations/edges for other nodes in the graph.
type GateEdges struct {
	// Lanes holds the value of the lanes edge.
	Lanes []*Lane `json:"lanes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// LanesOrErr returns the Lanes value or an error if the edge
// was not loaded in eager-loading.
func (e GateEdges) LanesOrErr() ([]*Lane, error) {
	if e.loadedTypes[0] {
		return e.Lanes, nil
	}
	return nil, &NotLoadedError{edge: "lanes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Gate) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case gate.FieldID:
			values[i] = new(sql.NullInt64)
		case gate.FieldName:
			values[i] = new(sql.NullString)
		case gate.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Gate", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Gate fields.
func (ga *Gate) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case gate.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ga.ID = int(value.Int64)
		case gate.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ga.Name = value.String
			}
		case gate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ga.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// QueryLanes queries the "lanes" edge of the Gate entity.
func (ga *Gate) QueryLanes() *LaneQuery {
	return (&GateClient{config: ga.config}).QueryLanes(ga)
}

// Update returns a builder for updating this Gate.
// Note that you need to call Gate.Unwrap() before calling this method if this Gate
// was returned from a transaction, and the transaction was committed or rolled back.
func (ga *Gate) Update() *GateUpdateOne {
	return (&GateClient{config: ga.config}).UpdateOne(ga)
}

// Unwrap unwraps the Gate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ga *Gate) Unwrap() *Gate {
	tx, ok := ga.config.driver.(*txDriver)
	if !ok {
		panic("ent: Gate is not a transactional entity")
	}
	ga.config.driver = tx.drv
	return ga
}

// String implements the fmt.Stringer.
func (ga *Gate) String() string {
	var builder strings.Builder
	builder.WriteString("Gate(")
	builder.WriteString(fmt.Sprintf("id=%v", ga.ID))
	builder.WriteString(", name=")
	builder.WriteString(ga.Name)
	builder.WriteString(", created_at=")
	builder.WriteString(ga.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Gates is a parsable slice of Gate.
type Gates []*Gate

func (ga Gates) config(cfg config) {
	for _i := range ga {
		ga[_i].config = cfg
	}
}
