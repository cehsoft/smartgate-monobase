// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/init-tech-solution/service-spitc-stream/services/manager/ent/containertracking"
)

// ContainerTracking is the model entity for the ContainerTracking schema.
type ContainerTracking struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ContainerID holds the value of the "container_id" field.
	ContainerID string `json:"container_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ContainerTrackingQuery when eager-loading is set.
	Edges ContainerTrackingEdges `json:"edges"`
}

// ContainerTrackingEdges holds the relations/edges for other nodes in the graph.
type ContainerTrackingEdges struct {
	// Suggestions holds the value of the suggestions edge.
	Suggestions []*ContainerTrackingSuggestion `json:"suggestions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SuggestionsOrErr returns the Suggestions value or an error if the edge
// was not loaded in eager-loading.
func (e ContainerTrackingEdges) SuggestionsOrErr() ([]*ContainerTrackingSuggestion, error) {
	if e.loadedTypes[0] {
		return e.Suggestions, nil
	}
	return nil, &NotLoadedError{edge: "suggestions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ContainerTracking) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case containertracking.FieldID:
			values[i] = new(sql.NullInt64)
		case containertracking.FieldContainerID:
			values[i] = new(sql.NullString)
		case containertracking.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ContainerTracking", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ContainerTracking fields.
func (ct *ContainerTracking) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case containertracking.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ct.ID = int(value.Int64)
		case containertracking.FieldContainerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field container_id", values[i])
			} else if value.Valid {
				ct.ContainerID = value.String
			}
		case containertracking.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ct.CreatedAt = value.Time
			}
		}
	}
	return nil
}

// QuerySuggestions queries the "suggestions" edge of the ContainerTracking entity.
func (ct *ContainerTracking) QuerySuggestions() *ContainerTrackingSuggestionQuery {
	return (&ContainerTrackingClient{config: ct.config}).QuerySuggestions(ct)
}

// Update returns a builder for updating this ContainerTracking.
// Note that you need to call ContainerTracking.Unwrap() before calling this method if this ContainerTracking
// was returned from a transaction, and the transaction was committed or rolled back.
func (ct *ContainerTracking) Update() *ContainerTrackingUpdateOne {
	return (&ContainerTrackingClient{config: ct.config}).UpdateOne(ct)
}

// Unwrap unwraps the ContainerTracking entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ct *ContainerTracking) Unwrap() *ContainerTracking {
	tx, ok := ct.config.driver.(*txDriver)
	if !ok {
		panic("ent: ContainerTracking is not a transactional entity")
	}
	ct.config.driver = tx.drv
	return ct
}

// String implements the fmt.Stringer.
func (ct *ContainerTracking) String() string {
	var builder strings.Builder
	builder.WriteString("ContainerTracking(")
	builder.WriteString(fmt.Sprintf("id=%v", ct.ID))
	builder.WriteString(", container_id=")
	builder.WriteString(ct.ContainerID)
	builder.WriteString(", created_at=")
	builder.WriteString(ct.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ContainerTrackings is a parsable slice of ContainerTracking.
type ContainerTrackings []*ContainerTracking

func (ct ContainerTrackings) config(cfg config) {
	for _i := range ct {
		ct[_i].config = cfg
	}
}
