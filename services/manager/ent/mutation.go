// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/init-tech-solution/service-spitc-stream/services/manager/ent/camsetting"
	"github.com/init-tech-solution/service-spitc-stream/services/manager/ent/containertracking"
	"github.com/init-tech-solution/service-spitc-stream/services/manager/ent/containertrackingsuggestion"
	"github.com/init-tech-solution/service-spitc-stream/services/manager/ent/gate"
	"github.com/init-tech-solution/service-spitc-stream/services/manager/ent/lane"
	"github.com/init-tech-solution/service-spitc-stream/services/manager/ent/predicate"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCamSetting                  = "CamSetting"
	TypeContainerTracking           = "ContainerTracking"
	TypeContainerTrackingSuggestion = "ContainerTrackingSuggestion"
	TypeGate                        = "Gate"
	TypeLane                        = "Lane"
	TypeUser                        = "User"
)

// CamSettingMutation represents an operation that mutates the CamSetting nodes in the graph.
type CamSettingMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	name               *string
	rtsp_url           *string
	webrtc_url         *string
	created_at         *time.Time
	clearedFields      map[string]struct{}
	lane               *int
	clearedlane        bool
	suggestions        map[int]struct{}
	removedsuggestions map[int]struct{}
	clearedsuggestions bool
	done               bool
	oldValue           func(context.Context) (*CamSetting, error)
	predicates         []predicate.CamSetting
}

var _ ent.Mutation = (*CamSettingMutation)(nil)

// camsettingOption allows management of the mutation configuration using functional options.
type camsettingOption func(*CamSettingMutation)

// newCamSettingMutation creates new mutation for the CamSetting entity.
func newCamSettingMutation(c config, op Op, opts ...camsettingOption) *CamSettingMutation {
	m := &CamSettingMutation{
		config:        c,
		op:            op,
		typ:           TypeCamSetting,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCamSettingID sets the ID field of the mutation.
func withCamSettingID(id int) camsettingOption {
	return func(m *CamSettingMutation) {
		var (
			err   error
			once  sync.Once
			value *CamSetting
		)
		m.oldValue = func(ctx context.Context) (*CamSetting, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CamSetting.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCamSetting sets the old CamSetting of the mutation.
func withCamSetting(node *CamSetting) camsettingOption {
	return func(m *CamSettingMutation) {
		m.oldValue = func(context.Context) (*CamSetting, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CamSettingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CamSettingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CamSettingMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *CamSettingMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CamSettingMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the CamSetting entity.
// If the CamSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CamSettingMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CamSettingMutation) ResetName() {
	m.name = nil
}

// SetLaneID sets the "lane_id" field.
func (m *CamSettingMutation) SetLaneID(i int) {
	m.lane = &i
}

// LaneID returns the value of the "lane_id" field in the mutation.
func (m *CamSettingMutation) LaneID() (r int, exists bool) {
	v := m.lane
	if v == nil {
		return
	}
	return *v, true
}

// OldLaneID returns the old "lane_id" field's value of the CamSetting entity.
// If the CamSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CamSettingMutation) OldLaneID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLaneID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLaneID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLaneID: %w", err)
	}
	return oldValue.LaneID, nil
}

// ClearLaneID clears the value of the "lane_id" field.
func (m *CamSettingMutation) ClearLaneID() {
	m.lane = nil
	m.clearedFields[camsetting.FieldLaneID] = struct{}{}
}

// LaneIDCleared returns if the "lane_id" field was cleared in this mutation.
func (m *CamSettingMutation) LaneIDCleared() bool {
	_, ok := m.clearedFields[camsetting.FieldLaneID]
	return ok
}

// ResetLaneID resets all changes to the "lane_id" field.
func (m *CamSettingMutation) ResetLaneID() {
	m.lane = nil
	delete(m.clearedFields, camsetting.FieldLaneID)
}

// SetRtspURL sets the "rtsp_url" field.
func (m *CamSettingMutation) SetRtspURL(s string) {
	m.rtsp_url = &s
}

// RtspURL returns the value of the "rtsp_url" field in the mutation.
func (m *CamSettingMutation) RtspURL() (r string, exists bool) {
	v := m.rtsp_url
	if v == nil {
		return
	}
	return *v, true
}

// OldRtspURL returns the old "rtsp_url" field's value of the CamSetting entity.
// If the CamSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CamSettingMutation) OldRtspURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRtspURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRtspURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRtspURL: %w", err)
	}
	return oldValue.RtspURL, nil
}

// ResetRtspURL resets all changes to the "rtsp_url" field.
func (m *CamSettingMutation) ResetRtspURL() {
	m.rtsp_url = nil
}

// SetWebrtcURL sets the "webrtc_url" field.
func (m *CamSettingMutation) SetWebrtcURL(s string) {
	m.webrtc_url = &s
}

// WebrtcURL returns the value of the "webrtc_url" field in the mutation.
func (m *CamSettingMutation) WebrtcURL() (r string, exists bool) {
	v := m.webrtc_url
	if v == nil {
		return
	}
	return *v, true
}

// OldWebrtcURL returns the old "webrtc_url" field's value of the CamSetting entity.
// If the CamSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CamSettingMutation) OldWebrtcURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWebrtcURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWebrtcURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWebrtcURL: %w", err)
	}
	return oldValue.WebrtcURL, nil
}

// ResetWebrtcURL resets all changes to the "webrtc_url" field.
func (m *CamSettingMutation) ResetWebrtcURL() {
	m.webrtc_url = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *CamSettingMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CamSettingMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CamSetting entity.
// If the CamSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CamSettingMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CamSettingMutation) ResetCreatedAt() {
	m.created_at = nil
}

// ClearLane clears the "lane" edge to the Lane entity.
func (m *CamSettingMutation) ClearLane() {
	m.clearedlane = true
}

// LaneCleared reports if the "lane" edge to the Lane entity was cleared.
func (m *CamSettingMutation) LaneCleared() bool {
	return m.LaneIDCleared() || m.clearedlane
}

// LaneIDs returns the "lane" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// LaneID instead. It exists only for internal usage by the builders.
func (m *CamSettingMutation) LaneIDs() (ids []int) {
	if id := m.lane; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetLane resets all changes to the "lane" edge.
func (m *CamSettingMutation) ResetLane() {
	m.lane = nil
	m.clearedlane = false
}

// AddSuggestionIDs adds the "suggestions" edge to the ContainerTrackingSuggestion entity by ids.
func (m *CamSettingMutation) AddSuggestionIDs(ids ...int) {
	if m.suggestions == nil {
		m.suggestions = make(map[int]struct{})
	}
	for i := range ids {
		m.suggestions[ids[i]] = struct{}{}
	}
}

// ClearSuggestions clears the "suggestions" edge to the ContainerTrackingSuggestion entity.
func (m *CamSettingMutation) ClearSuggestions() {
	m.clearedsuggestions = true
}

// SuggestionsCleared reports if the "suggestions" edge to the ContainerTrackingSuggestion entity was cleared.
func (m *CamSettingMutation) SuggestionsCleared() bool {
	return m.clearedsuggestions
}

// RemoveSuggestionIDs removes the "suggestions" edge to the ContainerTrackingSuggestion entity by IDs.
func (m *CamSettingMutation) RemoveSuggestionIDs(ids ...int) {
	if m.removedsuggestions == nil {
		m.removedsuggestions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.suggestions, ids[i])
		m.removedsuggestions[ids[i]] = struct{}{}
	}
}

// RemovedSuggestions returns the removed IDs of the "suggestions" edge to the ContainerTrackingSuggestion entity.
func (m *CamSettingMutation) RemovedSuggestionsIDs() (ids []int) {
	for id := range m.removedsuggestions {
		ids = append(ids, id)
	}
	return
}

// SuggestionsIDs returns the "suggestions" edge IDs in the mutation.
func (m *CamSettingMutation) SuggestionsIDs() (ids []int) {
	for id := range m.suggestions {
		ids = append(ids, id)
	}
	return
}

// ResetSuggestions resets all changes to the "suggestions" edge.
func (m *CamSettingMutation) ResetSuggestions() {
	m.suggestions = nil
	m.clearedsuggestions = false
	m.removedsuggestions = nil
}

// Where appends a list predicates to the CamSettingMutation builder.
func (m *CamSettingMutation) Where(ps ...predicate.CamSetting) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *CamSettingMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (CamSetting).
func (m *CamSettingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CamSettingMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, camsetting.FieldName)
	}
	if m.lane != nil {
		fields = append(fields, camsetting.FieldLaneID)
	}
	if m.rtsp_url != nil {
		fields = append(fields, camsetting.FieldRtspURL)
	}
	if m.webrtc_url != nil {
		fields = append(fields, camsetting.FieldWebrtcURL)
	}
	if m.created_at != nil {
		fields = append(fields, camsetting.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CamSettingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case camsetting.FieldName:
		return m.Name()
	case camsetting.FieldLaneID:
		return m.LaneID()
	case camsetting.FieldRtspURL:
		return m.RtspURL()
	case camsetting.FieldWebrtcURL:
		return m.WebrtcURL()
	case camsetting.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CamSettingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case camsetting.FieldName:
		return m.OldName(ctx)
	case camsetting.FieldLaneID:
		return m.OldLaneID(ctx)
	case camsetting.FieldRtspURL:
		return m.OldRtspURL(ctx)
	case camsetting.FieldWebrtcURL:
		return m.OldWebrtcURL(ctx)
	case camsetting.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown CamSetting field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CamSettingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case camsetting.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case camsetting.FieldLaneID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLaneID(v)
		return nil
	case camsetting.FieldRtspURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRtspURL(v)
		return nil
	case camsetting.FieldWebrtcURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWebrtcURL(v)
		return nil
	case camsetting.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown CamSetting field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CamSettingMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CamSettingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CamSettingMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CamSetting numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CamSettingMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(camsetting.FieldLaneID) {
		fields = append(fields, camsetting.FieldLaneID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CamSettingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CamSettingMutation) ClearField(name string) error {
	switch name {
	case camsetting.FieldLaneID:
		m.ClearLaneID()
		return nil
	}
	return fmt.Errorf("unknown CamSetting nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CamSettingMutation) ResetField(name string) error {
	switch name {
	case camsetting.FieldName:
		m.ResetName()
		return nil
	case camsetting.FieldLaneID:
		m.ResetLaneID()
		return nil
	case camsetting.FieldRtspURL:
		m.ResetRtspURL()
		return nil
	case camsetting.FieldWebrtcURL:
		m.ResetWebrtcURL()
		return nil
	case camsetting.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown CamSetting field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CamSettingMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.lane != nil {
		edges = append(edges, camsetting.EdgeLane)
	}
	if m.suggestions != nil {
		edges = append(edges, camsetting.EdgeSuggestions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CamSettingMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case camsetting.EdgeLane:
		if id := m.lane; id != nil {
			return []ent.Value{*id}
		}
	case camsetting.EdgeSuggestions:
		ids := make([]ent.Value, 0, len(m.suggestions))
		for id := range m.suggestions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CamSettingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedsuggestions != nil {
		edges = append(edges, camsetting.EdgeSuggestions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CamSettingMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case camsetting.EdgeSuggestions:
		ids := make([]ent.Value, 0, len(m.removedsuggestions))
		for id := range m.removedsuggestions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CamSettingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedlane {
		edges = append(edges, camsetting.EdgeLane)
	}
	if m.clearedsuggestions {
		edges = append(edges, camsetting.EdgeSuggestions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CamSettingMutation) EdgeCleared(name string) bool {
	switch name {
	case camsetting.EdgeLane:
		return m.clearedlane
	case camsetting.EdgeSuggestions:
		return m.clearedsuggestions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CamSettingMutation) ClearEdge(name string) error {
	switch name {
	case camsetting.EdgeLane:
		m.ClearLane()
		return nil
	}
	return fmt.Errorf("unknown CamSetting unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CamSettingMutation) ResetEdge(name string) error {
	switch name {
	case camsetting.EdgeLane:
		m.ResetLane()
		return nil
	case camsetting.EdgeSuggestions:
		m.ResetSuggestions()
		return nil
	}
	return fmt.Errorf("unknown CamSetting edge %s", name)
}

// ContainerTrackingMutation represents an operation that mutates the ContainerTracking nodes in the graph.
type ContainerTrackingMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	container_id       *string
	session_id         *string
	created_at         *time.Time
	clearedFields      map[string]struct{}
	suggestions        map[int]struct{}
	removedsuggestions map[int]struct{}
	clearedsuggestions bool
	done               bool
	oldValue           func(context.Context) (*ContainerTracking, error)
	predicates         []predicate.ContainerTracking
}

var _ ent.Mutation = (*ContainerTrackingMutation)(nil)

// containertrackingOption allows management of the mutation configuration using functional options.
type containertrackingOption func(*ContainerTrackingMutation)

// newContainerTrackingMutation creates new mutation for the ContainerTracking entity.
func newContainerTrackingMutation(c config, op Op, opts ...containertrackingOption) *ContainerTrackingMutation {
	m := &ContainerTrackingMutation{
		config:        c,
		op:            op,
		typ:           TypeContainerTracking,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withContainerTrackingID sets the ID field of the mutation.
func withContainerTrackingID(id int) containertrackingOption {
	return func(m *ContainerTrackingMutation) {
		var (
			err   error
			once  sync.Once
			value *ContainerTracking
		)
		m.oldValue = func(ctx context.Context) (*ContainerTracking, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ContainerTracking.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withContainerTracking sets the old ContainerTracking of the mutation.
func withContainerTracking(node *ContainerTracking) containertrackingOption {
	return func(m *ContainerTrackingMutation) {
		m.oldValue = func(context.Context) (*ContainerTracking, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ContainerTrackingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ContainerTrackingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ContainerTrackingMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetContainerID sets the "container_id" field.
func (m *ContainerTrackingMutation) SetContainerID(s string) {
	m.container_id = &s
}

// ContainerID returns the value of the "container_id" field in the mutation.
func (m *ContainerTrackingMutation) ContainerID() (r string, exists bool) {
	v := m.container_id
	if v == nil {
		return
	}
	return *v, true
}

// OldContainerID returns the old "container_id" field's value of the ContainerTracking entity.
// If the ContainerTracking object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContainerTrackingMutation) OldContainerID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldContainerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldContainerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContainerID: %w", err)
	}
	return oldValue.ContainerID, nil
}

// ResetContainerID resets all changes to the "container_id" field.
func (m *ContainerTrackingMutation) ResetContainerID() {
	m.container_id = nil
}

// SetSessionID sets the "session_id" field.
func (m *ContainerTrackingMutation) SetSessionID(s string) {
	m.session_id = &s
}

// SessionID returns the value of the "session_id" field in the mutation.
func (m *ContainerTrackingMutation) SessionID() (r string, exists bool) {
	v := m.session_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSessionID returns the old "session_id" field's value of the ContainerTracking entity.
// If the ContainerTracking object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContainerTrackingMutation) OldSessionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSessionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSessionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSessionID: %w", err)
	}
	return oldValue.SessionID, nil
}

// ClearSessionID clears the value of the "session_id" field.
func (m *ContainerTrackingMutation) ClearSessionID() {
	m.session_id = nil
	m.clearedFields[containertracking.FieldSessionID] = struct{}{}
}

// SessionIDCleared returns if the "session_id" field was cleared in this mutation.
func (m *ContainerTrackingMutation) SessionIDCleared() bool {
	_, ok := m.clearedFields[containertracking.FieldSessionID]
	return ok
}

// ResetSessionID resets all changes to the "session_id" field.
func (m *ContainerTrackingMutation) ResetSessionID() {
	m.session_id = nil
	delete(m.clearedFields, containertracking.FieldSessionID)
}

// SetCreatedAt sets the "created_at" field.
func (m *ContainerTrackingMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ContainerTrackingMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ContainerTracking entity.
// If the ContainerTracking object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContainerTrackingMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ContainerTrackingMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddSuggestionIDs adds the "suggestions" edge to the ContainerTrackingSuggestion entity by ids.
func (m *ContainerTrackingMutation) AddSuggestionIDs(ids ...int) {
	if m.suggestions == nil {
		m.suggestions = make(map[int]struct{})
	}
	for i := range ids {
		m.suggestions[ids[i]] = struct{}{}
	}
}

// ClearSuggestions clears the "suggestions" edge to the ContainerTrackingSuggestion entity.
func (m *ContainerTrackingMutation) ClearSuggestions() {
	m.clearedsuggestions = true
}

// SuggestionsCleared reports if the "suggestions" edge to the ContainerTrackingSuggestion entity was cleared.
func (m *ContainerTrackingMutation) SuggestionsCleared() bool {
	return m.clearedsuggestions
}

// RemoveSuggestionIDs removes the "suggestions" edge to the ContainerTrackingSuggestion entity by IDs.
func (m *ContainerTrackingMutation) RemoveSuggestionIDs(ids ...int) {
	if m.removedsuggestions == nil {
		m.removedsuggestions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.suggestions, ids[i])
		m.removedsuggestions[ids[i]] = struct{}{}
	}
}

// RemovedSuggestions returns the removed IDs of the "suggestions" edge to the ContainerTrackingSuggestion entity.
func (m *ContainerTrackingMutation) RemovedSuggestionsIDs() (ids []int) {
	for id := range m.removedsuggestions {
		ids = append(ids, id)
	}
	return
}

// SuggestionsIDs returns the "suggestions" edge IDs in the mutation.
func (m *ContainerTrackingMutation) SuggestionsIDs() (ids []int) {
	for id := range m.suggestions {
		ids = append(ids, id)
	}
	return
}

// ResetSuggestions resets all changes to the "suggestions" edge.
func (m *ContainerTrackingMutation) ResetSuggestions() {
	m.suggestions = nil
	m.clearedsuggestions = false
	m.removedsuggestions = nil
}

// Where appends a list predicates to the ContainerTrackingMutation builder.
func (m *ContainerTrackingMutation) Where(ps ...predicate.ContainerTracking) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ContainerTrackingMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ContainerTracking).
func (m *ContainerTrackingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ContainerTrackingMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.container_id != nil {
		fields = append(fields, containertracking.FieldContainerID)
	}
	if m.session_id != nil {
		fields = append(fields, containertracking.FieldSessionID)
	}
	if m.created_at != nil {
		fields = append(fields, containertracking.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ContainerTrackingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case containertracking.FieldContainerID:
		return m.ContainerID()
	case containertracking.FieldSessionID:
		return m.SessionID()
	case containertracking.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ContainerTrackingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case containertracking.FieldContainerID:
		return m.OldContainerID(ctx)
	case containertracking.FieldSessionID:
		return m.OldSessionID(ctx)
	case containertracking.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ContainerTracking field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ContainerTrackingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case containertracking.FieldContainerID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContainerID(v)
		return nil
	case containertracking.FieldSessionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSessionID(v)
		return nil
	case containertracking.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ContainerTracking field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ContainerTrackingMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ContainerTrackingMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ContainerTrackingMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ContainerTracking numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ContainerTrackingMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(containertracking.FieldSessionID) {
		fields = append(fields, containertracking.FieldSessionID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ContainerTrackingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ContainerTrackingMutation) ClearField(name string) error {
	switch name {
	case containertracking.FieldSessionID:
		m.ClearSessionID()
		return nil
	}
	return fmt.Errorf("unknown ContainerTracking nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ContainerTrackingMutation) ResetField(name string) error {
	switch name {
	case containertracking.FieldContainerID:
		m.ResetContainerID()
		return nil
	case containertracking.FieldSessionID:
		m.ResetSessionID()
		return nil
	case containertracking.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown ContainerTracking field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ContainerTrackingMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.suggestions != nil {
		edges = append(edges, containertracking.EdgeSuggestions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ContainerTrackingMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case containertracking.EdgeSuggestions:
		ids := make([]ent.Value, 0, len(m.suggestions))
		for id := range m.suggestions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ContainerTrackingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedsuggestions != nil {
		edges = append(edges, containertracking.EdgeSuggestions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ContainerTrackingMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case containertracking.EdgeSuggestions:
		ids := make([]ent.Value, 0, len(m.removedsuggestions))
		for id := range m.removedsuggestions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ContainerTrackingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedsuggestions {
		edges = append(edges, containertracking.EdgeSuggestions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ContainerTrackingMutation) EdgeCleared(name string) bool {
	switch name {
	case containertracking.EdgeSuggestions:
		return m.clearedsuggestions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ContainerTrackingMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown ContainerTracking unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ContainerTrackingMutation) ResetEdge(name string) error {
	switch name {
	case containertracking.EdgeSuggestions:
		m.ResetSuggestions()
		return nil
	}
	return fmt.Errorf("unknown ContainerTracking edge %s", name)
}

// ContainerTrackingSuggestionMutation represents an operation that mutates the ContainerTrackingSuggestion nodes in the graph.
type ContainerTrackingSuggestionMutation struct {
	config
	op              Op
	typ             string
	id              *int
	container_id    *string
	result          *string
	tracking_type   *string
	bic             *string
	serial          *string
	checksum        *string
	image_url       *string
	score           *float32
	addscore        *float32
	created_at      *time.Time
	clearedFields   map[string]struct{}
	cam             *int
	clearedcam      bool
	tracking        *int
	clearedtracking bool
	done            bool
	oldValue        func(context.Context) (*ContainerTrackingSuggestion, error)
	predicates      []predicate.ContainerTrackingSuggestion
}

var _ ent.Mutation = (*ContainerTrackingSuggestionMutation)(nil)

// containertrackingsuggestionOption allows management of the mutation configuration using functional options.
type containertrackingsuggestionOption func(*ContainerTrackingSuggestionMutation)

// newContainerTrackingSuggestionMutation creates new mutation for the ContainerTrackingSuggestion entity.
func newContainerTrackingSuggestionMutation(c config, op Op, opts ...containertrackingsuggestionOption) *ContainerTrackingSuggestionMutation {
	m := &ContainerTrackingSuggestionMutation{
		config:        c,
		op:            op,
		typ:           TypeContainerTrackingSuggestion,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withContainerTrackingSuggestionID sets the ID field of the mutation.
func withContainerTrackingSuggestionID(id int) containertrackingsuggestionOption {
	return func(m *ContainerTrackingSuggestionMutation) {
		var (
			err   error
			once  sync.Once
			value *ContainerTrackingSuggestion
		)
		m.oldValue = func(ctx context.Context) (*ContainerTrackingSuggestion, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ContainerTrackingSuggestion.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withContainerTrackingSuggestion sets the old ContainerTrackingSuggestion of the mutation.
func withContainerTrackingSuggestion(node *ContainerTrackingSuggestion) containertrackingsuggestionOption {
	return func(m *ContainerTrackingSuggestionMutation) {
		m.oldValue = func(context.Context) (*ContainerTrackingSuggestion, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ContainerTrackingSuggestionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ContainerTrackingSuggestionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ContainerTrackingSuggestionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetContainerID sets the "container_id" field.
func (m *ContainerTrackingSuggestionMutation) SetContainerID(s string) {
	m.container_id = &s
}

// ContainerID returns the value of the "container_id" field in the mutation.
func (m *ContainerTrackingSuggestionMutation) ContainerID() (r string, exists bool) {
	v := m.container_id
	if v == nil {
		return
	}
	return *v, true
}

// OldContainerID returns the old "container_id" field's value of the ContainerTrackingSuggestion entity.
// If the ContainerTrackingSuggestion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContainerTrackingSuggestionMutation) OldContainerID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldContainerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldContainerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContainerID: %w", err)
	}
	return oldValue.ContainerID, nil
}

// ResetContainerID resets all changes to the "container_id" field.
func (m *ContainerTrackingSuggestionMutation) ResetContainerID() {
	m.container_id = nil
}

// SetResult sets the "result" field.
func (m *ContainerTrackingSuggestionMutation) SetResult(s string) {
	m.result = &s
}

// Result returns the value of the "result" field in the mutation.
func (m *ContainerTrackingSuggestionMutation) Result() (r string, exists bool) {
	v := m.result
	if v == nil {
		return
	}
	return *v, true
}

// OldResult returns the old "result" field's value of the ContainerTrackingSuggestion entity.
// If the ContainerTrackingSuggestion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContainerTrackingSuggestionMutation) OldResult(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldResult is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldResult requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResult: %w", err)
	}
	return oldValue.Result, nil
}

// ClearResult clears the value of the "result" field.
func (m *ContainerTrackingSuggestionMutation) ClearResult() {
	m.result = nil
	m.clearedFields[containertrackingsuggestion.FieldResult] = struct{}{}
}

// ResultCleared returns if the "result" field was cleared in this mutation.
func (m *ContainerTrackingSuggestionMutation) ResultCleared() bool {
	_, ok := m.clearedFields[containertrackingsuggestion.FieldResult]
	return ok
}

// ResetResult resets all changes to the "result" field.
func (m *ContainerTrackingSuggestionMutation) ResetResult() {
	m.result = nil
	delete(m.clearedFields, containertrackingsuggestion.FieldResult)
}

// SetCamID sets the "cam_id" field.
func (m *ContainerTrackingSuggestionMutation) SetCamID(i int) {
	m.cam = &i
}

// CamID returns the value of the "cam_id" field in the mutation.
func (m *ContainerTrackingSuggestionMutation) CamID() (r int, exists bool) {
	v := m.cam
	if v == nil {
		return
	}
	return *v, true
}

// OldCamID returns the old "cam_id" field's value of the ContainerTrackingSuggestion entity.
// If the ContainerTrackingSuggestion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContainerTrackingSuggestionMutation) OldCamID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCamID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCamID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCamID: %w", err)
	}
	return oldValue.CamID, nil
}

// ClearCamID clears the value of the "cam_id" field.
func (m *ContainerTrackingSuggestionMutation) ClearCamID() {
	m.cam = nil
	m.clearedFields[containertrackingsuggestion.FieldCamID] = struct{}{}
}

// CamIDCleared returns if the "cam_id" field was cleared in this mutation.
func (m *ContainerTrackingSuggestionMutation) CamIDCleared() bool {
	_, ok := m.clearedFields[containertrackingsuggestion.FieldCamID]
	return ok
}

// ResetCamID resets all changes to the "cam_id" field.
func (m *ContainerTrackingSuggestionMutation) ResetCamID() {
	m.cam = nil
	delete(m.clearedFields, containertrackingsuggestion.FieldCamID)
}

// SetTrackingID sets the "tracking_id" field.
func (m *ContainerTrackingSuggestionMutation) SetTrackingID(i int) {
	m.tracking = &i
}

// TrackingID returns the value of the "tracking_id" field in the mutation.
func (m *ContainerTrackingSuggestionMutation) TrackingID() (r int, exists bool) {
	v := m.tracking
	if v == nil {
		return
	}
	return *v, true
}

// OldTrackingID returns the old "tracking_id" field's value of the ContainerTrackingSuggestion entity.
// If the ContainerTrackingSuggestion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContainerTrackingSuggestionMutation) OldTrackingID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTrackingID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTrackingID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTrackingID: %w", err)
	}
	return oldValue.TrackingID, nil
}

// ClearTrackingID clears the value of the "tracking_id" field.
func (m *ContainerTrackingSuggestionMutation) ClearTrackingID() {
	m.tracking = nil
	m.clearedFields[containertrackingsuggestion.FieldTrackingID] = struct{}{}
}

// TrackingIDCleared returns if the "tracking_id" field was cleared in this mutation.
func (m *ContainerTrackingSuggestionMutation) TrackingIDCleared() bool {
	_, ok := m.clearedFields[containertrackingsuggestion.FieldTrackingID]
	return ok
}

// ResetTrackingID resets all changes to the "tracking_id" field.
func (m *ContainerTrackingSuggestionMutation) ResetTrackingID() {
	m.tracking = nil
	delete(m.clearedFields, containertrackingsuggestion.FieldTrackingID)
}

// SetTrackingType sets the "tracking_type" field.
func (m *ContainerTrackingSuggestionMutation) SetTrackingType(s string) {
	m.tracking_type = &s
}

// TrackingType returns the value of the "tracking_type" field in the mutation.
func (m *ContainerTrackingSuggestionMutation) TrackingType() (r string, exists bool) {
	v := m.tracking_type
	if v == nil {
		return
	}
	return *v, true
}

// OldTrackingType returns the old "tracking_type" field's value of the ContainerTrackingSuggestion entity.
// If the ContainerTrackingSuggestion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContainerTrackingSuggestionMutation) OldTrackingType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTrackingType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTrackingType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTrackingType: %w", err)
	}
	return oldValue.TrackingType, nil
}

// ClearTrackingType clears the value of the "tracking_type" field.
func (m *ContainerTrackingSuggestionMutation) ClearTrackingType() {
	m.tracking_type = nil
	m.clearedFields[containertrackingsuggestion.FieldTrackingType] = struct{}{}
}

// TrackingTypeCleared returns if the "tracking_type" field was cleared in this mutation.
func (m *ContainerTrackingSuggestionMutation) TrackingTypeCleared() bool {
	_, ok := m.clearedFields[containertrackingsuggestion.FieldTrackingType]
	return ok
}

// ResetTrackingType resets all changes to the "tracking_type" field.
func (m *ContainerTrackingSuggestionMutation) ResetTrackingType() {
	m.tracking_type = nil
	delete(m.clearedFields, containertrackingsuggestion.FieldTrackingType)
}

// SetBic sets the "bic" field.
func (m *ContainerTrackingSuggestionMutation) SetBic(s string) {
	m.bic = &s
}

// Bic returns the value of the "bic" field in the mutation.
func (m *ContainerTrackingSuggestionMutation) Bic() (r string, exists bool) {
	v := m.bic
	if v == nil {
		return
	}
	return *v, true
}

// OldBic returns the old "bic" field's value of the ContainerTrackingSuggestion entity.
// If the ContainerTrackingSuggestion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContainerTrackingSuggestionMutation) OldBic(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBic is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBic requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBic: %w", err)
	}
	return oldValue.Bic, nil
}

// ClearBic clears the value of the "bic" field.
func (m *ContainerTrackingSuggestionMutation) ClearBic() {
	m.bic = nil
	m.clearedFields[containertrackingsuggestion.FieldBic] = struct{}{}
}

// BicCleared returns if the "bic" field was cleared in this mutation.
func (m *ContainerTrackingSuggestionMutation) BicCleared() bool {
	_, ok := m.clearedFields[containertrackingsuggestion.FieldBic]
	return ok
}

// ResetBic resets all changes to the "bic" field.
func (m *ContainerTrackingSuggestionMutation) ResetBic() {
	m.bic = nil
	delete(m.clearedFields, containertrackingsuggestion.FieldBic)
}

// SetSerial sets the "serial" field.
func (m *ContainerTrackingSuggestionMutation) SetSerial(s string) {
	m.serial = &s
}

// Serial returns the value of the "serial" field in the mutation.
func (m *ContainerTrackingSuggestionMutation) Serial() (r string, exists bool) {
	v := m.serial
	if v == nil {
		return
	}
	return *v, true
}

// OldSerial returns the old "serial" field's value of the ContainerTrackingSuggestion entity.
// If the ContainerTrackingSuggestion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContainerTrackingSuggestionMutation) OldSerial(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSerial is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSerial requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSerial: %w", err)
	}
	return oldValue.Serial, nil
}

// ClearSerial clears the value of the "serial" field.
func (m *ContainerTrackingSuggestionMutation) ClearSerial() {
	m.serial = nil
	m.clearedFields[containertrackingsuggestion.FieldSerial] = struct{}{}
}

// SerialCleared returns if the "serial" field was cleared in this mutation.
func (m *ContainerTrackingSuggestionMutation) SerialCleared() bool {
	_, ok := m.clearedFields[containertrackingsuggestion.FieldSerial]
	return ok
}

// ResetSerial resets all changes to the "serial" field.
func (m *ContainerTrackingSuggestionMutation) ResetSerial() {
	m.serial = nil
	delete(m.clearedFields, containertrackingsuggestion.FieldSerial)
}

// SetChecksum sets the "checksum" field.
func (m *ContainerTrackingSuggestionMutation) SetChecksum(s string) {
	m.checksum = &s
}

// Checksum returns the value of the "checksum" field in the mutation.
func (m *ContainerTrackingSuggestionMutation) Checksum() (r string, exists bool) {
	v := m.checksum
	if v == nil {
		return
	}
	return *v, true
}

// OldChecksum returns the old "checksum" field's value of the ContainerTrackingSuggestion entity.
// If the ContainerTrackingSuggestion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContainerTrackingSuggestionMutation) OldChecksum(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldChecksum is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldChecksum requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChecksum: %w", err)
	}
	return oldValue.Checksum, nil
}

// ClearChecksum clears the value of the "checksum" field.
func (m *ContainerTrackingSuggestionMutation) ClearChecksum() {
	m.checksum = nil
	m.clearedFields[containertrackingsuggestion.FieldChecksum] = struct{}{}
}

// ChecksumCleared returns if the "checksum" field was cleared in this mutation.
func (m *ContainerTrackingSuggestionMutation) ChecksumCleared() bool {
	_, ok := m.clearedFields[containertrackingsuggestion.FieldChecksum]
	return ok
}

// ResetChecksum resets all changes to the "checksum" field.
func (m *ContainerTrackingSuggestionMutation) ResetChecksum() {
	m.checksum = nil
	delete(m.clearedFields, containertrackingsuggestion.FieldChecksum)
}

// SetImageURL sets the "image_url" field.
func (m *ContainerTrackingSuggestionMutation) SetImageURL(s string) {
	m.image_url = &s
}

// ImageURL returns the value of the "image_url" field in the mutation.
func (m *ContainerTrackingSuggestionMutation) ImageURL() (r string, exists bool) {
	v := m.image_url
	if v == nil {
		return
	}
	return *v, true
}

// OldImageURL returns the old "image_url" field's value of the ContainerTrackingSuggestion entity.
// If the ContainerTrackingSuggestion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContainerTrackingSuggestionMutation) OldImageURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldImageURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldImageURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImageURL: %w", err)
	}
	return oldValue.ImageURL, nil
}

// ClearImageURL clears the value of the "image_url" field.
func (m *ContainerTrackingSuggestionMutation) ClearImageURL() {
	m.image_url = nil
	m.clearedFields[containertrackingsuggestion.FieldImageURL] = struct{}{}
}

// ImageURLCleared returns if the "image_url" field was cleared in this mutation.
func (m *ContainerTrackingSuggestionMutation) ImageURLCleared() bool {
	_, ok := m.clearedFields[containertrackingsuggestion.FieldImageURL]
	return ok
}

// ResetImageURL resets all changes to the "image_url" field.
func (m *ContainerTrackingSuggestionMutation) ResetImageURL() {
	m.image_url = nil
	delete(m.clearedFields, containertrackingsuggestion.FieldImageURL)
}

// SetScore sets the "score" field.
func (m *ContainerTrackingSuggestionMutation) SetScore(f float32) {
	m.score = &f
	m.addscore = nil
}

// Score returns the value of the "score" field in the mutation.
func (m *ContainerTrackingSuggestionMutation) Score() (r float32, exists bool) {
	v := m.score
	if v == nil {
		return
	}
	return *v, true
}

// OldScore returns the old "score" field's value of the ContainerTrackingSuggestion entity.
// If the ContainerTrackingSuggestion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContainerTrackingSuggestionMutation) OldScore(ctx context.Context) (v float32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldScore is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldScore requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScore: %w", err)
	}
	return oldValue.Score, nil
}

// AddScore adds f to the "score" field.
func (m *ContainerTrackingSuggestionMutation) AddScore(f float32) {
	if m.addscore != nil {
		*m.addscore += f
	} else {
		m.addscore = &f
	}
}

// AddedScore returns the value that was added to the "score" field in this mutation.
func (m *ContainerTrackingSuggestionMutation) AddedScore() (r float32, exists bool) {
	v := m.addscore
	if v == nil {
		return
	}
	return *v, true
}

// ResetScore resets all changes to the "score" field.
func (m *ContainerTrackingSuggestionMutation) ResetScore() {
	m.score = nil
	m.addscore = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ContainerTrackingSuggestionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ContainerTrackingSuggestionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ContainerTrackingSuggestion entity.
// If the ContainerTrackingSuggestion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ContainerTrackingSuggestionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ContainerTrackingSuggestionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// ClearCam clears the "cam" edge to the CamSetting entity.
func (m *ContainerTrackingSuggestionMutation) ClearCam() {
	m.clearedcam = true
}

// CamCleared reports if the "cam" edge to the CamSetting entity was cleared.
func (m *ContainerTrackingSuggestionMutation) CamCleared() bool {
	return m.CamIDCleared() || m.clearedcam
}

// CamIDs returns the "cam" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CamID instead. It exists only for internal usage by the builders.
func (m *ContainerTrackingSuggestionMutation) CamIDs() (ids []int) {
	if id := m.cam; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCam resets all changes to the "cam" edge.
func (m *ContainerTrackingSuggestionMutation) ResetCam() {
	m.cam = nil
	m.clearedcam = false
}

// ClearTracking clears the "tracking" edge to the ContainerTracking entity.
func (m *ContainerTrackingSuggestionMutation) ClearTracking() {
	m.clearedtracking = true
}

// TrackingCleared reports if the "tracking" edge to the ContainerTracking entity was cleared.
func (m *ContainerTrackingSuggestionMutation) TrackingCleared() bool {
	return m.TrackingIDCleared() || m.clearedtracking
}

// TrackingIDs returns the "tracking" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TrackingID instead. It exists only for internal usage by the builders.
func (m *ContainerTrackingSuggestionMutation) TrackingIDs() (ids []int) {
	if id := m.tracking; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTracking resets all changes to the "tracking" edge.
func (m *ContainerTrackingSuggestionMutation) ResetTracking() {
	m.tracking = nil
	m.clearedtracking = false
}

// Where appends a list predicates to the ContainerTrackingSuggestionMutation builder.
func (m *ContainerTrackingSuggestionMutation) Where(ps ...predicate.ContainerTrackingSuggestion) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ContainerTrackingSuggestionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ContainerTrackingSuggestion).
func (m *ContainerTrackingSuggestionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ContainerTrackingSuggestionMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.container_id != nil {
		fields = append(fields, containertrackingsuggestion.FieldContainerID)
	}
	if m.result != nil {
		fields = append(fields, containertrackingsuggestion.FieldResult)
	}
	if m.cam != nil {
		fields = append(fields, containertrackingsuggestion.FieldCamID)
	}
	if m.tracking != nil {
		fields = append(fields, containertrackingsuggestion.FieldTrackingID)
	}
	if m.tracking_type != nil {
		fields = append(fields, containertrackingsuggestion.FieldTrackingType)
	}
	if m.bic != nil {
		fields = append(fields, containertrackingsuggestion.FieldBic)
	}
	if m.serial != nil {
		fields = append(fields, containertrackingsuggestion.FieldSerial)
	}
	if m.checksum != nil {
		fields = append(fields, containertrackingsuggestion.FieldChecksum)
	}
	if m.image_url != nil {
		fields = append(fields, containertrackingsuggestion.FieldImageURL)
	}
	if m.score != nil {
		fields = append(fields, containertrackingsuggestion.FieldScore)
	}
	if m.created_at != nil {
		fields = append(fields, containertrackingsuggestion.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ContainerTrackingSuggestionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case containertrackingsuggestion.FieldContainerID:
		return m.ContainerID()
	case containertrackingsuggestion.FieldResult:
		return m.Result()
	case containertrackingsuggestion.FieldCamID:
		return m.CamID()
	case containertrackingsuggestion.FieldTrackingID:
		return m.TrackingID()
	case containertrackingsuggestion.FieldTrackingType:
		return m.TrackingType()
	case containertrackingsuggestion.FieldBic:
		return m.Bic()
	case containertrackingsuggestion.FieldSerial:
		return m.Serial()
	case containertrackingsuggestion.FieldChecksum:
		return m.Checksum()
	case containertrackingsuggestion.FieldImageURL:
		return m.ImageURL()
	case containertrackingsuggestion.FieldScore:
		return m.Score()
	case containertrackingsuggestion.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ContainerTrackingSuggestionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case containertrackingsuggestion.FieldContainerID:
		return m.OldContainerID(ctx)
	case containertrackingsuggestion.FieldResult:
		return m.OldResult(ctx)
	case containertrackingsuggestion.FieldCamID:
		return m.OldCamID(ctx)
	case containertrackingsuggestion.FieldTrackingID:
		return m.OldTrackingID(ctx)
	case containertrackingsuggestion.FieldTrackingType:
		return m.OldTrackingType(ctx)
	case containertrackingsuggestion.FieldBic:
		return m.OldBic(ctx)
	case containertrackingsuggestion.FieldSerial:
		return m.OldSerial(ctx)
	case containertrackingsuggestion.FieldChecksum:
		return m.OldChecksum(ctx)
	case containertrackingsuggestion.FieldImageURL:
		return m.OldImageURL(ctx)
	case containertrackingsuggestion.FieldScore:
		return m.OldScore(ctx)
	case containertrackingsuggestion.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown ContainerTrackingSuggestion field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ContainerTrackingSuggestionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case containertrackingsuggestion.FieldContainerID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContainerID(v)
		return nil
	case containertrackingsuggestion.FieldResult:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResult(v)
		return nil
	case containertrackingsuggestion.FieldCamID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCamID(v)
		return nil
	case containertrackingsuggestion.FieldTrackingID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTrackingID(v)
		return nil
	case containertrackingsuggestion.FieldTrackingType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTrackingType(v)
		return nil
	case containertrackingsuggestion.FieldBic:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBic(v)
		return nil
	case containertrackingsuggestion.FieldSerial:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSerial(v)
		return nil
	case containertrackingsuggestion.FieldChecksum:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChecksum(v)
		return nil
	case containertrackingsuggestion.FieldImageURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImageURL(v)
		return nil
	case containertrackingsuggestion.FieldScore:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScore(v)
		return nil
	case containertrackingsuggestion.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown ContainerTrackingSuggestion field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ContainerTrackingSuggestionMutation) AddedFields() []string {
	var fields []string
	if m.addscore != nil {
		fields = append(fields, containertrackingsuggestion.FieldScore)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ContainerTrackingSuggestionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case containertrackingsuggestion.FieldScore:
		return m.AddedScore()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ContainerTrackingSuggestionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case containertrackingsuggestion.FieldScore:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddScore(v)
		return nil
	}
	return fmt.Errorf("unknown ContainerTrackingSuggestion numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ContainerTrackingSuggestionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(containertrackingsuggestion.FieldResult) {
		fields = append(fields, containertrackingsuggestion.FieldResult)
	}
	if m.FieldCleared(containertrackingsuggestion.FieldCamID) {
		fields = append(fields, containertrackingsuggestion.FieldCamID)
	}
	if m.FieldCleared(containertrackingsuggestion.FieldTrackingID) {
		fields = append(fields, containertrackingsuggestion.FieldTrackingID)
	}
	if m.FieldCleared(containertrackingsuggestion.FieldTrackingType) {
		fields = append(fields, containertrackingsuggestion.FieldTrackingType)
	}
	if m.FieldCleared(containertrackingsuggestion.FieldBic) {
		fields = append(fields, containertrackingsuggestion.FieldBic)
	}
	if m.FieldCleared(containertrackingsuggestion.FieldSerial) {
		fields = append(fields, containertrackingsuggestion.FieldSerial)
	}
	if m.FieldCleared(containertrackingsuggestion.FieldChecksum) {
		fields = append(fields, containertrackingsuggestion.FieldChecksum)
	}
	if m.FieldCleared(containertrackingsuggestion.FieldImageURL) {
		fields = append(fields, containertrackingsuggestion.FieldImageURL)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ContainerTrackingSuggestionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ContainerTrackingSuggestionMutation) ClearField(name string) error {
	switch name {
	case containertrackingsuggestion.FieldResult:
		m.ClearResult()
		return nil
	case containertrackingsuggestion.FieldCamID:
		m.ClearCamID()
		return nil
	case containertrackingsuggestion.FieldTrackingID:
		m.ClearTrackingID()
		return nil
	case containertrackingsuggestion.FieldTrackingType:
		m.ClearTrackingType()
		return nil
	case containertrackingsuggestion.FieldBic:
		m.ClearBic()
		return nil
	case containertrackingsuggestion.FieldSerial:
		m.ClearSerial()
		return nil
	case containertrackingsuggestion.FieldChecksum:
		m.ClearChecksum()
		return nil
	case containertrackingsuggestion.FieldImageURL:
		m.ClearImageURL()
		return nil
	}
	return fmt.Errorf("unknown ContainerTrackingSuggestion nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ContainerTrackingSuggestionMutation) ResetField(name string) error {
	switch name {
	case containertrackingsuggestion.FieldContainerID:
		m.ResetContainerID()
		return nil
	case containertrackingsuggestion.FieldResult:
		m.ResetResult()
		return nil
	case containertrackingsuggestion.FieldCamID:
		m.ResetCamID()
		return nil
	case containertrackingsuggestion.FieldTrackingID:
		m.ResetTrackingID()
		return nil
	case containertrackingsuggestion.FieldTrackingType:
		m.ResetTrackingType()
		return nil
	case containertrackingsuggestion.FieldBic:
		m.ResetBic()
		return nil
	case containertrackingsuggestion.FieldSerial:
		m.ResetSerial()
		return nil
	case containertrackingsuggestion.FieldChecksum:
		m.ResetChecksum()
		return nil
	case containertrackingsuggestion.FieldImageURL:
		m.ResetImageURL()
		return nil
	case containertrackingsuggestion.FieldScore:
		m.ResetScore()
		return nil
	case containertrackingsuggestion.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown ContainerTrackingSuggestion field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ContainerTrackingSuggestionMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cam != nil {
		edges = append(edges, containertrackingsuggestion.EdgeCam)
	}
	if m.tracking != nil {
		edges = append(edges, containertrackingsuggestion.EdgeTracking)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ContainerTrackingSuggestionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case containertrackingsuggestion.EdgeCam:
		if id := m.cam; id != nil {
			return []ent.Value{*id}
		}
	case containertrackingsuggestion.EdgeTracking:
		if id := m.tracking; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ContainerTrackingSuggestionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ContainerTrackingSuggestionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ContainerTrackingSuggestionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedcam {
		edges = append(edges, containertrackingsuggestion.EdgeCam)
	}
	if m.clearedtracking {
		edges = append(edges, containertrackingsuggestion.EdgeTracking)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ContainerTrackingSuggestionMutation) EdgeCleared(name string) bool {
	switch name {
	case containertrackingsuggestion.EdgeCam:
		return m.clearedcam
	case containertrackingsuggestion.EdgeTracking:
		return m.clearedtracking
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ContainerTrackingSuggestionMutation) ClearEdge(name string) error {
	switch name {
	case containertrackingsuggestion.EdgeCam:
		m.ClearCam()
		return nil
	case containertrackingsuggestion.EdgeTracking:
		m.ClearTracking()
		return nil
	}
	return fmt.Errorf("unknown ContainerTrackingSuggestion unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ContainerTrackingSuggestionMutation) ResetEdge(name string) error {
	switch name {
	case containertrackingsuggestion.EdgeCam:
		m.ResetCam()
		return nil
	case containertrackingsuggestion.EdgeTracking:
		m.ResetTracking()
		return nil
	}
	return fmt.Errorf("unknown ContainerTrackingSuggestion edge %s", name)
}

// GateMutation represents an operation that mutates the Gate nodes in the graph.
type GateMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	created_at    *time.Time
	clearedFields map[string]struct{}
	lanes         map[int]struct{}
	removedlanes  map[int]struct{}
	clearedlanes  bool
	done          bool
	oldValue      func(context.Context) (*Gate, error)
	predicates    []predicate.Gate
}

var _ ent.Mutation = (*GateMutation)(nil)

// gateOption allows management of the mutation configuration using functional options.
type gateOption func(*GateMutation)

// newGateMutation creates new mutation for the Gate entity.
func newGateMutation(c config, op Op, opts ...gateOption) *GateMutation {
	m := &GateMutation{
		config:        c,
		op:            op,
		typ:           TypeGate,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGateID sets the ID field of the mutation.
func withGateID(id int) gateOption {
	return func(m *GateMutation) {
		var (
			err   error
			once  sync.Once
			value *Gate
		)
		m.oldValue = func(ctx context.Context) (*Gate, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Gate.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGate sets the old Gate of the mutation.
func withGate(node *Gate) gateOption {
	return func(m *GateMutation) {
		m.oldValue = func(context.Context) (*Gate, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GateMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *GateMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *GateMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Gate entity.
// If the Gate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GateMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *GateMutation) ResetName() {
	m.name = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *GateMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *GateMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Gate entity.
// If the Gate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GateMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *GateMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddLaneIDs adds the "lanes" edge to the Lane entity by ids.
func (m *GateMutation) AddLaneIDs(ids ...int) {
	if m.lanes == nil {
		m.lanes = make(map[int]struct{})
	}
	for i := range ids {
		m.lanes[ids[i]] = struct{}{}
	}
}

// ClearLanes clears the "lanes" edge to the Lane entity.
func (m *GateMutation) ClearLanes() {
	m.clearedlanes = true
}

// LanesCleared reports if the "lanes" edge to the Lane entity was cleared.
func (m *GateMutation) LanesCleared() bool {
	return m.clearedlanes
}

// RemoveLaneIDs removes the "lanes" edge to the Lane entity by IDs.
func (m *GateMutation) RemoveLaneIDs(ids ...int) {
	if m.removedlanes == nil {
		m.removedlanes = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.lanes, ids[i])
		m.removedlanes[ids[i]] = struct{}{}
	}
}

// RemovedLanes returns the removed IDs of the "lanes" edge to the Lane entity.
func (m *GateMutation) RemovedLanesIDs() (ids []int) {
	for id := range m.removedlanes {
		ids = append(ids, id)
	}
	return
}

// LanesIDs returns the "lanes" edge IDs in the mutation.
func (m *GateMutation) LanesIDs() (ids []int) {
	for id := range m.lanes {
		ids = append(ids, id)
	}
	return
}

// ResetLanes resets all changes to the "lanes" edge.
func (m *GateMutation) ResetLanes() {
	m.lanes = nil
	m.clearedlanes = false
	m.removedlanes = nil
}

// Where appends a list predicates to the GateMutation builder.
func (m *GateMutation) Where(ps ...predicate.Gate) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *GateMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Gate).
func (m *GateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GateMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, gate.FieldName)
	}
	if m.created_at != nil {
		fields = append(fields, gate.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case gate.FieldName:
		return m.Name()
	case gate.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case gate.FieldName:
		return m.OldName(ctx)
	case gate.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Gate field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case gate.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case gate.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Gate field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GateMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GateMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GateMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Gate numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GateMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GateMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Gate nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GateMutation) ResetField(name string) error {
	switch name {
	case gate.FieldName:
		m.ResetName()
		return nil
	case gate.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Gate field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GateMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.lanes != nil {
		edges = append(edges, gate.EdgeLanes)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GateMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case gate.EdgeLanes:
		ids := make([]ent.Value, 0, len(m.lanes))
		for id := range m.lanes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedlanes != nil {
		edges = append(edges, gate.EdgeLanes)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GateMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case gate.EdgeLanes:
		ids := make([]ent.Value, 0, len(m.removedlanes))
		for id := range m.removedlanes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedlanes {
		edges = append(edges, gate.EdgeLanes)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GateMutation) EdgeCleared(name string) bool {
	switch name {
	case gate.EdgeLanes:
		return m.clearedlanes
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GateMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Gate unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GateMutation) ResetEdge(name string) error {
	switch name {
	case gate.EdgeLanes:
		m.ResetLanes()
		return nil
	}
	return fmt.Errorf("unknown Gate edge %s", name)
}

// LaneMutation represents an operation that mutates the Lane nodes in the graph.
type LaneMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	created_at    *time.Time
	clearedFields map[string]struct{}
	cams          map[int]struct{}
	removedcams   map[int]struct{}
	clearedcams   bool
	gate          *int
	clearedgate   bool
	done          bool
	oldValue      func(context.Context) (*Lane, error)
	predicates    []predicate.Lane
}

var _ ent.Mutation = (*LaneMutation)(nil)

// laneOption allows management of the mutation configuration using functional options.
type laneOption func(*LaneMutation)

// newLaneMutation creates new mutation for the Lane entity.
func newLaneMutation(c config, op Op, opts ...laneOption) *LaneMutation {
	m := &LaneMutation{
		config:        c,
		op:            op,
		typ:           TypeLane,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLaneID sets the ID field of the mutation.
func withLaneID(id int) laneOption {
	return func(m *LaneMutation) {
		var (
			err   error
			once  sync.Once
			value *Lane
		)
		m.oldValue = func(ctx context.Context) (*Lane, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Lane.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLane sets the old Lane of the mutation.
func withLane(node *Lane) laneOption {
	return func(m *LaneMutation) {
		m.oldValue = func(context.Context) (*Lane, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LaneMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LaneMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LaneMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *LaneMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *LaneMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Lane entity.
// If the Lane object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LaneMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *LaneMutation) ResetName() {
	m.name = nil
}

// SetGateID sets the "gate_id" field.
func (m *LaneMutation) SetGateID(i int) {
	m.gate = &i
}

// GateID returns the value of the "gate_id" field in the mutation.
func (m *LaneMutation) GateID() (r int, exists bool) {
	v := m.gate
	if v == nil {
		return
	}
	return *v, true
}

// OldGateID returns the old "gate_id" field's value of the Lane entity.
// If the Lane object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LaneMutation) OldGateID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGateID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGateID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGateID: %w", err)
	}
	return oldValue.GateID, nil
}

// ClearGateID clears the value of the "gate_id" field.
func (m *LaneMutation) ClearGateID() {
	m.gate = nil
	m.clearedFields[lane.FieldGateID] = struct{}{}
}

// GateIDCleared returns if the "gate_id" field was cleared in this mutation.
func (m *LaneMutation) GateIDCleared() bool {
	_, ok := m.clearedFields[lane.FieldGateID]
	return ok
}

// ResetGateID resets all changes to the "gate_id" field.
func (m *LaneMutation) ResetGateID() {
	m.gate = nil
	delete(m.clearedFields, lane.FieldGateID)
}

// SetCreatedAt sets the "created_at" field.
func (m *LaneMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *LaneMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Lane entity.
// If the Lane object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LaneMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *LaneMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddCamIDs adds the "cams" edge to the CamSetting entity by ids.
func (m *LaneMutation) AddCamIDs(ids ...int) {
	if m.cams == nil {
		m.cams = make(map[int]struct{})
	}
	for i := range ids {
		m.cams[ids[i]] = struct{}{}
	}
}

// ClearCams clears the "cams" edge to the CamSetting entity.
func (m *LaneMutation) ClearCams() {
	m.clearedcams = true
}

// CamsCleared reports if the "cams" edge to the CamSetting entity was cleared.
func (m *LaneMutation) CamsCleared() bool {
	return m.clearedcams
}

// RemoveCamIDs removes the "cams" edge to the CamSetting entity by IDs.
func (m *LaneMutation) RemoveCamIDs(ids ...int) {
	if m.removedcams == nil {
		m.removedcams = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.cams, ids[i])
		m.removedcams[ids[i]] = struct{}{}
	}
}

// RemovedCams returns the removed IDs of the "cams" edge to the CamSetting entity.
func (m *LaneMutation) RemovedCamsIDs() (ids []int) {
	for id := range m.removedcams {
		ids = append(ids, id)
	}
	return
}

// CamsIDs returns the "cams" edge IDs in the mutation.
func (m *LaneMutation) CamsIDs() (ids []int) {
	for id := range m.cams {
		ids = append(ids, id)
	}
	return
}

// ResetCams resets all changes to the "cams" edge.
func (m *LaneMutation) ResetCams() {
	m.cams = nil
	m.clearedcams = false
	m.removedcams = nil
}

// ClearGate clears the "gate" edge to the Gate entity.
func (m *LaneMutation) ClearGate() {
	m.clearedgate = true
}

// GateCleared reports if the "gate" edge to the Gate entity was cleared.
func (m *LaneMutation) GateCleared() bool {
	return m.GateIDCleared() || m.clearedgate
}

// GateIDs returns the "gate" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GateID instead. It exists only for internal usage by the builders.
func (m *LaneMutation) GateIDs() (ids []int) {
	if id := m.gate; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGate resets all changes to the "gate" edge.
func (m *LaneMutation) ResetGate() {
	m.gate = nil
	m.clearedgate = false
}

// Where appends a list predicates to the LaneMutation builder.
func (m *LaneMutation) Where(ps ...predicate.Lane) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *LaneMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Lane).
func (m *LaneMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LaneMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, lane.FieldName)
	}
	if m.gate != nil {
		fields = append(fields, lane.FieldGateID)
	}
	if m.created_at != nil {
		fields = append(fields, lane.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LaneMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case lane.FieldName:
		return m.Name()
	case lane.FieldGateID:
		return m.GateID()
	case lane.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LaneMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case lane.FieldName:
		return m.OldName(ctx)
	case lane.FieldGateID:
		return m.OldGateID(ctx)
	case lane.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Lane field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LaneMutation) SetField(name string, value ent.Value) error {
	switch name {
	case lane.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case lane.FieldGateID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGateID(v)
		return nil
	case lane.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Lane field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LaneMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LaneMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LaneMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Lane numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LaneMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(lane.FieldGateID) {
		fields = append(fields, lane.FieldGateID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LaneMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LaneMutation) ClearField(name string) error {
	switch name {
	case lane.FieldGateID:
		m.ClearGateID()
		return nil
	}
	return fmt.Errorf("unknown Lane nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LaneMutation) ResetField(name string) error {
	switch name {
	case lane.FieldName:
		m.ResetName()
		return nil
	case lane.FieldGateID:
		m.ResetGateID()
		return nil
	case lane.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Lane field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LaneMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cams != nil {
		edges = append(edges, lane.EdgeCams)
	}
	if m.gate != nil {
		edges = append(edges, lane.EdgeGate)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LaneMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case lane.EdgeCams:
		ids := make([]ent.Value, 0, len(m.cams))
		for id := range m.cams {
			ids = append(ids, id)
		}
		return ids
	case lane.EdgeGate:
		if id := m.gate; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LaneMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedcams != nil {
		edges = append(edges, lane.EdgeCams)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LaneMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case lane.EdgeCams:
		ids := make([]ent.Value, 0, len(m.removedcams))
		for id := range m.removedcams {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LaneMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedcams {
		edges = append(edges, lane.EdgeCams)
	}
	if m.clearedgate {
		edges = append(edges, lane.EdgeGate)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LaneMutation) EdgeCleared(name string) bool {
	switch name {
	case lane.EdgeCams:
		return m.clearedcams
	case lane.EdgeGate:
		return m.clearedgate
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LaneMutation) ClearEdge(name string) error {
	switch name {
	case lane.EdgeGate:
		m.ClearGate()
		return nil
	}
	return fmt.Errorf("unknown Lane unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LaneMutation) ResetEdge(name string) error {
	switch name {
	case lane.EdgeCams:
		m.ResetCams()
		return nil
	case lane.EdgeGate:
		m.ResetGate()
		return nil
	}
	return fmt.Errorf("unknown Lane edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
