// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/init-tech-solution/service-spitc-stream/services/manager/ent/containertracking"
	"github.com/init-tech-solution/service-spitc-stream/services/manager/ent/containertrackingsuggestion"
)

// ContainerTrackingSuggestionCreate is the builder for creating a ContainerTrackingSuggestion entity.
type ContainerTrackingSuggestionCreate struct {
	config
	mutation *ContainerTrackingSuggestionMutation
	hooks    []Hook
}

// SetTrackingID sets the "tracking_id" field.
func (ctsc *ContainerTrackingSuggestionCreate) SetTrackingID(i int) *ContainerTrackingSuggestionCreate {
	ctsc.mutation.SetTrackingID(i)
	return ctsc
}

// SetNillableTrackingID sets the "tracking_id" field if the given value is not nil.
func (ctsc *ContainerTrackingSuggestionCreate) SetNillableTrackingID(i *int) *ContainerTrackingSuggestionCreate {
	if i != nil {
		ctsc.SetTrackingID(*i)
	}
	return ctsc
}

// SetContainerID sets the "container_id" field.
func (ctsc *ContainerTrackingSuggestionCreate) SetContainerID(s string) *ContainerTrackingSuggestionCreate {
	ctsc.mutation.SetContainerID(s)
	return ctsc
}

// SetImageURL sets the "image_url" field.
func (ctsc *ContainerTrackingSuggestionCreate) SetImageURL(s string) *ContainerTrackingSuggestionCreate {
	ctsc.mutation.SetImageURL(s)
	return ctsc
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (ctsc *ContainerTrackingSuggestionCreate) SetNillableImageURL(s *string) *ContainerTrackingSuggestionCreate {
	if s != nil {
		ctsc.SetImageURL(*s)
	}
	return ctsc
}

// SetScore sets the "score" field.
func (ctsc *ContainerTrackingSuggestionCreate) SetScore(f float32) *ContainerTrackingSuggestionCreate {
	ctsc.mutation.SetScore(f)
	return ctsc
}

// SetCreatedAt sets the "created_at" field.
func (ctsc *ContainerTrackingSuggestionCreate) SetCreatedAt(t time.Time) *ContainerTrackingSuggestionCreate {
	ctsc.mutation.SetCreatedAt(t)
	return ctsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ctsc *ContainerTrackingSuggestionCreate) SetNillableCreatedAt(t *time.Time) *ContainerTrackingSuggestionCreate {
	if t != nil {
		ctsc.SetCreatedAt(*t)
	}
	return ctsc
}

// SetTracking sets the "tracking" edge to the ContainerTracking entity.
func (ctsc *ContainerTrackingSuggestionCreate) SetTracking(c *ContainerTracking) *ContainerTrackingSuggestionCreate {
	return ctsc.SetTrackingID(c.ID)
}

// Mutation returns the ContainerTrackingSuggestionMutation object of the builder.
func (ctsc *ContainerTrackingSuggestionCreate) Mutation() *ContainerTrackingSuggestionMutation {
	return ctsc.mutation
}

// Save creates the ContainerTrackingSuggestion in the database.
func (ctsc *ContainerTrackingSuggestionCreate) Save(ctx context.Context) (*ContainerTrackingSuggestion, error) {
	var (
		err  error
		node *ContainerTrackingSuggestion
	)
	ctsc.defaults()
	if len(ctsc.hooks) == 0 {
		if err = ctsc.check(); err != nil {
			return nil, err
		}
		node, err = ctsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ContainerTrackingSuggestionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ctsc.check(); err != nil {
				return nil, err
			}
			ctsc.mutation = mutation
			node, err = ctsc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ctsc.hooks) - 1; i >= 0; i-- {
			mut = ctsc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ctsc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ctsc *ContainerTrackingSuggestionCreate) SaveX(ctx context.Context) *ContainerTrackingSuggestion {
	v, err := ctsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (ctsc *ContainerTrackingSuggestionCreate) defaults() {
	if _, ok := ctsc.mutation.CreatedAt(); !ok {
		v := containertrackingsuggestion.DefaultCreatedAt()
		ctsc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ctsc *ContainerTrackingSuggestionCreate) check() error {
	if _, ok := ctsc.mutation.ContainerID(); !ok {
		return &ValidationError{Name: "container_id", err: errors.New("ent: missing required field \"container_id\"")}
	}
	if _, ok := ctsc.mutation.Score(); !ok {
		return &ValidationError{Name: "score", err: errors.New("ent: missing required field \"score\"")}
	}
	if _, ok := ctsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	return nil
}

func (ctsc *ContainerTrackingSuggestionCreate) sqlSave(ctx context.Context) (*ContainerTrackingSuggestion, error) {
	_node, _spec := ctsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ctsc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ctsc *ContainerTrackingSuggestionCreate) createSpec() (*ContainerTrackingSuggestion, *sqlgraph.CreateSpec) {
	var (
		_node = &ContainerTrackingSuggestion{config: ctsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: containertrackingsuggestion.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: containertrackingsuggestion.FieldID,
			},
		}
	)
	if value, ok := ctsc.mutation.ContainerID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: containertrackingsuggestion.FieldContainerID,
		})
		_node.ContainerID = value
	}
	if value, ok := ctsc.mutation.ImageURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: containertrackingsuggestion.FieldImageURL,
		})
		_node.ImageURL = value
	}
	if value, ok := ctsc.mutation.Score(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: containertrackingsuggestion.FieldScore,
		})
		_node.Score = value
	}
	if value, ok := ctsc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: containertrackingsuggestion.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if nodes := ctsc.mutation.TrackingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   containertrackingsuggestion.TrackingTable,
			Columns: []string{containertrackingsuggestion.TrackingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: containertracking.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TrackingID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ContainerTrackingSuggestionCreateBulk is the builder for creating many ContainerTrackingSuggestion entities in bulk.
type ContainerTrackingSuggestionCreateBulk struct {
	config
	builders []*ContainerTrackingSuggestionCreate
}

// Save creates the ContainerTrackingSuggestion entities in the database.
func (ctscb *ContainerTrackingSuggestionCreateBulk) Save(ctx context.Context) ([]*ContainerTrackingSuggestion, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ctscb.builders))
	nodes := make([]*ContainerTrackingSuggestion, len(ctscb.builders))
	mutators := make([]Mutator, len(ctscb.builders))
	for i := range ctscb.builders {
		func(i int, root context.Context) {
			builder := ctscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ContainerTrackingSuggestionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ctscb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ctscb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ctscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ctscb *ContainerTrackingSuggestionCreateBulk) SaveX(ctx context.Context) []*ContainerTrackingSuggestion {
	v, err := ctscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
