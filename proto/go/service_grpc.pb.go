// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mygrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RPCSvcClient is the client API for RPCSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCSvcClient interface {
	StreamMLResult(ctx context.Context, in *ReqMLResult, opts ...grpc.CallOption) (RPCSvc_StreamMLResultClient, error)
	ConfirmContainerID(ctx context.Context, in *ReqConfirmContainerID, opts ...grpc.CallOption) (*ResConfirmContainerID, error)
}

type rPCSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCSvcClient(cc grpc.ClientConnInterface) RPCSvcClient {
	return &rPCSvcClient{cc}
}

func (c *rPCSvcClient) StreamMLResult(ctx context.Context, in *ReqMLResult, opts ...grpc.CallOption) (RPCSvc_StreamMLResultClient, error) {
	stream, err := c.cc.NewStream(ctx, &RPCSvc_ServiceDesc.Streams[0], "/main.RPCSvc/streamMLResult", opts...)
	if err != nil {
		return nil, err
	}
	x := &rPCSvcStreamMLResultClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RPCSvc_StreamMLResultClient interface {
	Recv() (*ResMLResult, error)
	grpc.ClientStream
}

type rPCSvcStreamMLResultClient struct {
	grpc.ClientStream
}

func (x *rPCSvcStreamMLResultClient) Recv() (*ResMLResult, error) {
	m := new(ResMLResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rPCSvcClient) ConfirmContainerID(ctx context.Context, in *ReqConfirmContainerID, opts ...grpc.CallOption) (*ResConfirmContainerID, error) {
	out := new(ResConfirmContainerID)
	err := c.cc.Invoke(ctx, "/main.RPCSvc/confirmContainerID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCSvcServer is the server API for RPCSvc service.
// All implementations must embed UnimplementedRPCSvcServer
// for forward compatibility
type RPCSvcServer interface {
	StreamMLResult(*ReqMLResult, RPCSvc_StreamMLResultServer) error
	ConfirmContainerID(context.Context, *ReqConfirmContainerID) (*ResConfirmContainerID, error)
	mustEmbedUnimplementedRPCSvcServer()
}

// UnimplementedRPCSvcServer must be embedded to have forward compatible implementations.
type UnimplementedRPCSvcServer struct {
}

func (UnimplementedRPCSvcServer) StreamMLResult(*ReqMLResult, RPCSvc_StreamMLResultServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMLResult not implemented")
}
func (UnimplementedRPCSvcServer) ConfirmContainerID(context.Context, *ReqConfirmContainerID) (*ResConfirmContainerID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmContainerID not implemented")
}
func (UnimplementedRPCSvcServer) mustEmbedUnimplementedRPCSvcServer() {}

// UnsafeRPCSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCSvcServer will
// result in compilation errors.
type UnsafeRPCSvcServer interface {
	mustEmbedUnimplementedRPCSvcServer()
}

func RegisterRPCSvcServer(s grpc.ServiceRegistrar, srv RPCSvcServer) {
	s.RegisterService(&RPCSvc_ServiceDesc, srv)
}

func _RPCSvc_StreamMLResult_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReqMLResult)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RPCSvcServer).StreamMLResult(m, &rPCSvcStreamMLResultServer{stream})
}

type RPCSvc_StreamMLResultServer interface {
	Send(*ResMLResult) error
	grpc.ServerStream
}

type rPCSvcStreamMLResultServer struct {
	grpc.ServerStream
}

func (x *rPCSvcStreamMLResultServer) Send(m *ResMLResult) error {
	return x.ServerStream.SendMsg(m)
}

func _RPCSvc_ConfirmContainerID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqConfirmContainerID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCSvcServer).ConfirmContainerID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.RPCSvc/confirmContainerID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCSvcServer).ConfirmContainerID(ctx, req.(*ReqConfirmContainerID))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCSvc_ServiceDesc is the grpc.ServiceDesc for RPCSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.RPCSvc",
	HandlerType: (*RPCSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "confirmContainerID",
			Handler:    _RPCSvc_ConfirmContainerID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "streamMLResult",
			Handler:       _RPCSvc_StreamMLResult_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
