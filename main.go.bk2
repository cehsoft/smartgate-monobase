package main

import (
	"errors"
	"log"
	"time"

	"github.com/deepch/vdk/format/mp4f"
	"github.com/deepch/vdk/format/rtspv2"
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	"golang.org/x/net/websocket"
)

func main() {

	channelMP4f := make(chan []byte, 1000)

	sv := echo.New()
	sv.Use(middleware.Logger())
	sv.Use(middleware.Recover())
	sv.Static("/", "web/static")
	sv.GET("/ws", func(c echo.Context) error {
		websocket.Handler(func(ws *websocket.Conn) {
			defer ws.Close()

			for {
				select {
				case mp4f := <-channelMP4f:
					err := websocket.Message.Send(ws, mp4f)
					if err != nil {
						c.Logger().Error(err)
					}

					// fmt.Print(len(mp4f), " ")
				default:
					// fmt.Println("nothing to sent")
				}
			}
		}).ServeHTTP(c.Response(), c.Request())
		return nil
	})

	go func() {
		err := stream(channelMP4f)
		if err != nil {
			log.Fatalln(err)
		}
	}()

	err := sv.Start(":3000")
	if err != nil {
		log.Fatalln(err)
	}
}

var ErrNoH264Track = errors.New("h264 track not found")

func stream(channelMP4f chan []byte) error {
	client, err := rtspv2.Dial(rtspv2.RTSPClientOptions{
		URL:              "rtsp://admin:tg12346789g@14.161.28.68:50240/Streaming/channels/101",
		DisableAudio:     true,
		DialTimeout:      3 * time.Second,
		ReadWriteTimeout: 3 * time.Second,
		Debug:            false})
	if err != nil {
		return err
	}
	defer client.Close()

	time.Sleep(1 * time.Second)

	mp4fmuxer := &mp4f.Muxer{}

	err = mp4fmuxer.WriteHeader(client.CodecData)
	if err != nil {
		return err
	}
	_, init := mp4fmuxer.GetInit(client.CodecData)
	channelMP4f <- init

	started := false
	timeline := time.Duration(0)
	for packetAV := range client.OutgoingPacketQueue {
		if packetAV != nil {
			if packetAV.IsKeyFrame {
				started = true
			}

			if !started {
				continue
			}

			timeline = timeline + packetAV.Duration
			packetAV.Time = timeline

			ok, mp4f, err := mp4fmuxer.WritePacket(*packetAV, false)
			if err != nil {
				return err
			}

			if ok {
				channelMP4f <- mp4f
			}
		}
	}

	return nil
}
